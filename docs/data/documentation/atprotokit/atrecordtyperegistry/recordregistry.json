{"metadata":{"modules":[{"name":"ATProtoKit"}],"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"recordRegistry"},{"text":": [","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":" : any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit16ATRecordProtocolP","text":"ATRecordProtocol"},{"text":".Type]","kind":"text"}],"title":"recordRegistry","symbolKind":"property","externalID":"s:10ATProtoKit20ATRecordTypeRegistryC06recordE0SDySSAA0C8Protocol_pXpGvpZ","roleHeading":"Type Property","remoteSource":{"url":"https:\/\/github.com\/MasterJ93\/ATProtoKit\/tree\/main\/Sources\/ATProtoKit\/Utilities\/ATRecordProtocol.swift#L127","fileName":"ATRecordProtocol.swift"}},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/atrecordtyperegistry\/recordregistry"]}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordTypeRegistry"]]},"abstract":[{"type":"text","text":"The registry itself."}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"recordRegistry"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":" : any "},{"text":"ATRecordProtocol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit16ATRecordProtocolP"},{"kind":"text","text":".Type] { "},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Stores a mapping from Namespaced Identifier (NSID) strings to corresponding record types.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This contains a "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":", which contains the value of the "},{"type":"codeVoice","code":"$type"},{"text":" property in the","type":"text"},{"type":"text","text":" "},{"text":"lexicon (which is used as the “key”), and the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol"},{"text":"-conforming ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":"s"},{"type":"text","text":" "},{"text":"(which is used as the “value”). ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"text":" will search for the key that matches with","type":"text"},{"type":"text","text":" "},{"text":"the JSON object’s ","type":"text"},{"code":"$type","type":"codeVoice"},{"text":" property, and then decode or encode the JSON object using the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":" that was found if there’s a match."}]}]}],"identifier":{"url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordTypeRegistry\/recordRegistry","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","references":{"doc://ATProtoKit/documentation/ATProtoKit/UnknownType":{"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnknownType"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","navigatorTitle":[{"text":"UnknownType","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/atprotokit\/unknowntype","title":"UnknownType","abstract":[{"text":"Handles decoding and encoding of records when their type is not known ahead of type.","type":"text"}]},"doc://ATProtoKit/documentation/ATProtoKit/ATRecordTypeRegistry/recordRegistry":{"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"recordRegistry"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":" : any ","kind":"text"},{"text":"ATRecordProtocol","preciseIdentifier":"s:10ATProtoKit16ATRecordProtocolP","kind":"typeIdentifier"},{"kind":"text","text":".Type]"}],"kind":"symbol","abstract":[{"text":"The registry itself.","type":"text"}],"title":"recordRegistry","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordTypeRegistry\/recordRegistry","type":"topic","url":"\/documentation\/atprotokit\/atrecordtyperegistry\/recordregistry"},"doc://ATProtoKit/documentation/ATProtoKit/ATRecordTypeRegistry":{"navigatorTitle":[{"text":"ATRecordTypeRegistry","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"text":"A registry for all decodable record types in the AT Protocol.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ATRecordTypeRegistry","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordTypeRegistry","url":"\/documentation\/atprotokit\/atrecordtyperegistry","role":"symbol","title":"ATRecordTypeRegistry"},"doc://ATProtoKit/documentation/ATProtoKit/ATRecordProtocol":{"kind":"symbol","type":"topic","abstract":[{"text":"The common interface for record structs in the AT Protocol.","type":"text"}],"title":"ATRecordProtocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ATRecordProtocol","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","navigatorTitle":[{"text":"ATRecordProtocol","kind":"identifier"}],"url":"\/documentation\/atprotokit\/atrecordprotocol"},"atprotokit_icon.png":{"alt":"A technology icon representing the ATProtoKit framework.","type":"image","variants":[{"url":"\/images\/atprotokit_icon.png","traits":["1x","light"]}],"identifier":"atprotokit_icon.png"},"doc://ATProtoKit/documentation/ATProtoKit":{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","images":[{"type":"icon","identifier":"atprotokit_icon.png"}],"abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"url":"\/documentation\/atprotokit","kind":"symbol","type":"topic","role":"collection","title":"ATProtoKit"}}}