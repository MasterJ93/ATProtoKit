{"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/atprotokit\/getrecordtutorial"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Get records easily without explicit pattern matching in only one line."}],"metadata":{"modules":[{"name":"ATProtoKit"}],"roleHeading":"Article","role":"article","title":"Retrieving Records with getRecord()"},"seeAlsoSections":[{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"],"title":"Related Documentation"},{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"],"title":"UnknownType","generated":true}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Records are one of the most important aspects of the AT Protocol, as it’s what allows you to create posts, likes, reposts, and more. As a result, you’ll be referencing them often."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All records in ATProtoKit conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol"},{"text":", and any lexicon models that have records as the value will have ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"text":" as the value type. Typically speaking, when referencing a record, you would use ","type":"text"},{"code":"if case let","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"guard case let","type":"codeVoice"},{"text":", and then grab the results from there. However, doing this requires using multiple lines and handling different scopes.","type":"text"}]},{"inlineContent":[{"type":"text","text":"To solve this problem, "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","type":"reference","isActive":true},{"text":" has a public method method, named ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","type":"reference"},{"text":". This will allow you to reference a record in one line.","type":"text"}],"type":"paragraph"},{"text":"Referencing a Record","level":2,"anchor":"Referencing-a-Record","type":"heading"},{"inlineContent":[{"type":"text","text":"You can call the method on a property that has "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","isActive":true,"type":"reference"},{"text":" as the value type:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["do {","    let postArray = atProto.searchPosts(with: \"atprotokit\")","    let post = postArray.posts[0].record.getRecord(ofType: AppBskyLexicon.Feed.PostRecord.self).text","} catch {","    \/\/ error...","}"]},{"inlineContent":[{"type":"text","text":"There’s one required parameter used tell the method which "},{"type":"codeVoice","code":"struct"},{"text":" to decode the JSON response to. Make sure you add ","type":"text"},{"type":"codeVoice","code":".self"},{"type":"text","text":" at the end of the name of the "},{"type":"codeVoice","code":"struct"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"These are all of the requirements of ","type":"text"},{"type":"codeVoice","code":"getRecord()"},{"text":". You can continue to chain the properties as normal.","type":"text"}]}],"kind":"content"}],"kind":"article","sections":[],"identifier":{"url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/getRecordTutorial","interfaceLanguage":"swift"},"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATRecordProtocol":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ATRecordProtocol"}],"title":"ATRecordProtocol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ATRecordProtocol"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","abstract":[{"type":"text","text":"The common interface for record structs in the AT Protocol."}],"kind":"symbol","url":"\/documentation\/atprotokit\/atrecordprotocol"},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType":{"kind":"symbol","url":"\/documentation\/atprotokit\/unknowntype","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnknownType"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","type":"topic","navigatorTitle":[{"kind":"identifier","text":"UnknownType"}],"abstract":[{"text":"Handles decoding and encoding of records when their type is not known ahead of type.","type":"text"}],"title":"UnknownType"},"doc://ATProtoKit/documentation/ATProtoKit/CodableValue":{"navigatorTitle":[{"text":"CodableValue","kind":"identifier"}],"type":"topic","abstract":[{"text":"A type-safe and thread-safe representation of JSON-compatible values, used for encoding and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding arbitrary JSON data."}],"role":"symbol","url":"\/documentation\/atprotokit\/codablevalue","title":"CodableValue","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodableValue"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType/getRecord(ofType:)":{"type":"topic","abstract":[{"type":"text","text":"Attempts to retrieve a record of the specified type from an "},{"code":"UnknownType","type":"codeVoice"},{"text":" instance.","type":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"getRecord"},{"text":"<","kind":"text"},{"text":"Record","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"ofType","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Record"},{"text":".Type) -> ","kind":"text"},{"text":"Record","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"getRecord(ofType:)","role":"symbol","url":"\/documentation\/atprotokit\/unknowntype\/getrecord(oftype:)"},"doc://ATProtoKit/documentation/ATProtoKit":{"title":"ATProtoKit","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","url":"\/documentation\/atprotokit","kind":"symbol","abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"role":"collection","images":[{"type":"icon","identifier":"atprotokit_logo.png"}],"type":"topic"},"atprotokit_logo.png":{"variants":[{"url":"\/images\/atprotokit_logo.png","traits":["1x","light"]}],"alt":"A technology icon representing the ATProtoKit framework.","identifier":"atprotokit_logo.png","type":"image"}}}