{"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Records are one of the most important aspects of the AT Protocol, as it’s what allows you to create posts, likes, reposts, and more. As a result, you’ll be referencing them often."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All records in ATProtoKit conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol"},{"text":", and any lexicon models that have records as the value will have ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","type":"reference","isActive":true},{"text":" as the value type. Typically speaking, when referencing a record, you would use ","type":"text"},{"type":"codeVoice","code":"if case let"},{"text":" or ","type":"text"},{"code":"guard case let","type":"codeVoice"},{"type":"text","text":", and then grab the results from there. However, doing this requires using multiple lines and handling different scopes."}]},{"inlineContent":[{"type":"text","text":"To solve this problem, "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","isActive":true},{"text":" has a public method method, named ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","isActive":true},{"type":"text","text":". This will allow you to reference a record in one line."}],"type":"paragraph"},{"anchor":"Referencing-a-Record","level":2,"text":"Referencing a Record","type":"heading"},{"inlineContent":[{"text":"You can call the method on a property that has ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"text":" as the value type:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["do {","    let postArray = atProto.searchPosts(with: \"atprotokit\")","    let post = postArray.posts[0].record.getRecord(ofType: AppBskyLexicon.Feed.PostRecord.self).text","} catch {","    \/\/ error...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s one required parameter used tell the method which "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" to decode the JSON response to. Make sure you add "},{"type":"codeVoice","code":".self"},{"text":" at the end of the name of the ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These are all of the requirements of "},{"code":"getRecord()","type":"codeVoice"},{"type":"text","text":". You can continue to chain the properties as normal."}]}]}],"kind":"article","variants":[{"paths":["\/documentation\/atprotokit\/getrecordtutorial"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/getRecordTutorial"},"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"roleHeading":"Article","role":"article","title":"Retrieving Records with getRecord()","modules":[{"name":"ATProtoKit"}]},"abstract":[{"type":"text","text":"Get records easily without explicit pattern matching in only one line."}],"seeAlsoSections":[{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"],"title":"Related Documentation"},{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"],"generated":true,"title":"UnknownType"}],"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATRecordProtocol":{"abstract":[{"text":"The common interface for record structs in the AT Protocol.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","type":"topic","url":"\/documentation\/atprotokit\/atrecordprotocol","navigatorTitle":[{"kind":"identifier","text":"ATRecordProtocol"}],"title":"ATRecordProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ATRecordProtocol"}],"kind":"symbol"},"atprotokit_logo.png":{"identifier":"atprotokit_logo.png","alt":"A technology icon representing the ATProtoKit framework.","variants":[{"url":"\/images\/atprotokit_logo.png","traits":["1x","light"]}],"type":"image"},"doc://ATProtoKit/documentation/ATProtoKit":{"type":"topic","title":"ATProtoKit","kind":"symbol","url":"\/documentation\/atprotokit","role":"collection","images":[{"identifier":"atprotokit_logo.png","type":"icon"}],"abstract":[{"text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky.","type":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit"},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType/getRecord(ofType:)":{"abstract":[{"type":"text","text":"Attempts to retrieve a record of the specified type from an "},{"type":"codeVoice","code":"UnknownType"},{"type":"text","text":" instance."}],"role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","type":"topic","url":"\/documentation\/atprotokit\/unknowntype\/getrecord(oftype:)","title":"getRecord(ofType:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"getRecord"},{"text":"<","kind":"text"},{"text":"Record","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"ofType"},{"kind":"text","text":": "},{"text":"Record","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"Record"},{"text":"?","kind":"text"}],"kind":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType":{"url":"\/documentation\/atprotokit\/unknowntype","kind":"symbol","title":"UnknownType","navigatorTitle":[{"text":"UnknownType","kind":"identifier"}],"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnknownType","kind":"identifier"}],"abstract":[{"type":"text","text":"Handles decoding and encoding of records when their type is not known ahead of type."}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","role":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/CodableValue":{"abstract":[{"text":"A type-safe and thread-safe representation of JSON-compatible values, used for encoding and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding arbitrary JSON data."}],"title":"CodableValue","navigatorTitle":[{"text":"CodableValue","kind":"identifier"}],"url":"\/documentation\/atprotokit\/codablevalue","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodableValue"}]}}}