{"metadata":{"roleHeading":"Article","title":"Retrieving Records with getRecord()","modules":[{"name":"ATProtoKit"}],"role":"article"},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Records are one of the most important aspects of the AT Protocol, as it’s what allows you to create posts, likes, reposts, and more. As a result, you’ll be referencing them often.","type":"text"}]},{"inlineContent":[{"text":"All records in ATProtoKit conform to ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","type":"reference","isActive":true},{"type":"text","text":", and any lexicon models that have records as the value will have "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","isActive":true},{"text":" as the value type. Typically speaking, when referencing a record, you would use ","type":"text"},{"type":"codeVoice","code":"if case let"},{"type":"text","text":" or "},{"code":"guard case let","type":"codeVoice"},{"type":"text","text":", and then grab the results from there. However, doing this requires using multiple lines and handling different scopes."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To solve this problem, "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","isActive":true},{"type":"text","text":" has a public method method, named "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","type":"reference","isActive":true},{"text":". This will allow you to reference a record in one line.","type":"text"}]},{"text":"Referencing a Record","level":2,"anchor":"Referencing-a-Record","type":"heading"},{"inlineContent":[{"text":"You can call the method on a property that has ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"text":" as the value type:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["do {","    let postArray = atProto.searchPosts(with: \"atprotokit\")","    let post = postArray.posts[0].record.getRecord(ofType: AppBskyLexicon.Feed.PostRecord.self).text","} catch {","    \/\/ error...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"There’s one required parameter used tell the method which ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":" to decode the JSON response to. Make sure you add "},{"code":".self","type":"codeVoice"},{"type":"text","text":" at the end of the name of the "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"These are all of the requirements of ","type":"text"},{"code":"getRecord()","type":"codeVoice"},{"text":". You can continue to chain the properties as normal.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"seeAlsoSections":[{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"],"title":"Related Documentation"},{"generated":true,"title":"UnknownType","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/getrecordtutorial"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/getRecordTutorial"},"kind":"article","abstract":[{"text":"Get records easily without explicit pattern matching in only one line.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://ATProtoKit/documentation/ATProtoKit/UnknownType/getRecord(ofType:)":{"url":"\/documentation\/atprotokit\/unknowntype\/getrecord(oftype:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getRecord","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Record"},{"text":">(","kind":"text"},{"text":"ofType","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Record"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Record"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","abstract":[{"type":"text","text":"Attempts to retrieve a record of the specified type from an "},{"code":"UnknownType","type":"codeVoice"},{"text":" instance.","type":"text"}],"kind":"symbol","title":"getRecord(ofType:)","type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit/ATRecordProtocol":{"url":"\/documentation\/atprotokit\/atrecordprotocol","title":"ATRecordProtocol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","type":"topic","abstract":[{"text":"The common interface for record structs in the AT Protocol.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATRecordProtocol"}],"navigatorTitle":[{"kind":"identifier","text":"ATRecordProtocol"}],"kind":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/CodableValue":{"role":"symbol","title":"CodableValue","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"CodableValue","kind":"identifier"}],"abstract":[{"type":"text","text":"A type-safe and thread-safe representation of JSON-compatible values, used for encoding and"},{"text":" ","type":"text"},{"text":"decoding arbitrary JSON data.","type":"text"}],"type":"topic","url":"\/documentation\/atprotokit\/codablevalue","navigatorTitle":[{"kind":"identifier","text":"CodableValue"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue","kind":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType":{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","type":"topic","abstract":[{"type":"text","text":"Handles decoding and encoding of records when their type is not known ahead of type."}],"kind":"symbol","url":"\/documentation\/atprotokit\/unknowntype","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnknownType"}],"navigatorTitle":[{"text":"UnknownType","kind":"identifier"}],"role":"symbol","title":"UnknownType"},"atprotokit_logo.png":{"alt":"A technology icon representing the ATProtoKit framework.","type":"image","identifier":"atprotokit_logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/atprotokit_logo.png"}]},"doc://ATProtoKit/documentation/ATProtoKit":{"kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","url":"\/documentation\/atprotokit","title":"ATProtoKit","abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"type":"topic","role":"collection","images":[{"type":"icon","identifier":"atprotokit_logo.png"}]}}}