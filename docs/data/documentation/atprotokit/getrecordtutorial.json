{"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Records are one of the most important aspects of the AT Protocol, as it’s what allows you to create posts, likes, reposts, and more. As a result, you’ll be referencing them often.","type":"text"}]},{"inlineContent":[{"type":"text","text":"All records in ATProtoKit conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol"},{"type":"text","text":", and any lexicon models that have records as the value will have "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","isActive":true},{"type":"text","text":" as the value type. Typically speaking, when referencing a record, you would use "},{"type":"codeVoice","code":"if case let"},{"type":"text","text":" or "},{"code":"guard case let","type":"codeVoice"},{"text":", and then grab the results from there. However, doing this requires using multiple lines and handling different scopes.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To solve this problem, ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"type":"text","text":" has a public method method, named "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"},{"type":"text","text":". This will allow you to reference a record in one line."}]},{"level":2,"anchor":"Referencing-a-Record","type":"heading","text":"Referencing a Record"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call the method on a property that has "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"text":" as the value type:","type":"text"}]},{"type":"codeListing","code":["do {","    let postArray = atProto.searchPosts(with: \"atprotokit\")","    let post = postArray.posts[0].record.getRecord(ofType: AppBskyLexicon.Feed.PostRecord.self).text","} catch {","    \/\/ error...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s one required parameter used tell the method which "},{"type":"codeVoice","code":"struct"},{"text":" to decode the JSON response to. Make sure you add ","type":"text"},{"code":".self","type":"codeVoice"},{"text":" at the end of the name of the ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"These are all of the requirements of "},{"code":"getRecord()","type":"codeVoice"},{"text":". You can continue to chain the properties as normal.","type":"text"}],"type":"paragraph"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/getRecordTutorial"},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"]},{"title":"UnknownType","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/getrecordtutorial"]}],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Get records easily without explicit pattern matching in only one line.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"metadata":{"modules":[{"name":"ATProtoKit"}],"title":"Retrieving Records with getRecord()","role":"article","roleHeading":"Article"},"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATRecordProtocol":{"navigatorTitle":[{"text":"ATRecordProtocol","kind":"identifier"}],"url":"\/documentation\/atprotokit\/atrecordprotocol","kind":"symbol","abstract":[{"type":"text","text":"The common interface for record structs in the AT Protocol."}],"title":"ATRecordProtocol","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ATRecordProtocol","kind":"identifier"}],"role":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit":{"type":"topic","kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","url":"\/documentation\/atprotokit","role":"collection","abstract":[{"text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky.","type":"text"}],"title":"ATProtoKit","images":[{"type":"icon","identifier":"atprotokit_logo.png"}]},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType/getRecord(ofType:)":{"url":"\/documentation\/atprotokit\/unknowntype\/getrecord(oftype:)","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","title":"getRecord(ofType:)","type":"topic","abstract":[{"text":"Attempts to retrieve a record of the specified type from an ","type":"text"},{"code":"UnknownType","type":"codeVoice"},{"type":"text","text":" instance."}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"getRecord"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Record"},{"text":">(","kind":"text"},{"text":"ofType","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Record"},{"text":".Type) -> ","kind":"text"},{"text":"Record","kind":"typeIdentifier"},{"kind":"text","text":"?"}]},"atprotokit_logo.png":{"alt":"A technology icon representing the ATProtoKit framework.","type":"image","identifier":"atprotokit_logo.png","variants":[{"url":"\/images\/atprotokit_logo.png","traits":["1x","light"]}]},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType":{"title":"UnknownType","url":"\/documentation\/atprotokit\/unknowntype","type":"topic","abstract":[{"text":"Handles decoding and encoding of records when their type is not known ahead of type.","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnknownType"}],"kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","role":"symbol","navigatorTitle":[{"text":"UnknownType","kind":"identifier"}]},"doc://ATProtoKit/documentation/ATProtoKit/CodableValue":{"title":"CodableValue","url":"\/documentation\/atprotokit\/codablevalue","type":"topic","abstract":[{"text":"A type-safe and thread-safe representation of JSON-compatible values, used for encoding and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding arbitrary JSON data."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodableValue","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue","role":"symbol","navigatorTitle":[{"text":"CodableValue","kind":"identifier"}]}}}