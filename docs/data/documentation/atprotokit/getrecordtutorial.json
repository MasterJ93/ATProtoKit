{"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Records are one of the most important aspects of the AT Protocol, as it’s what allows you to create posts, likes, reposts, and more. As a result, you’ll be referencing them often.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All records in ATProtoKit conform to "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","type":"reference","isActive":true},{"type":"text","text":", and any lexicon models that have records as the value will have "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","type":"reference","isActive":true},{"type":"text","text":" as the value type. Typically speaking, when referencing a record, you would use "},{"type":"codeVoice","code":"if case let"},{"type":"text","text":" or "},{"type":"codeVoice","code":"guard case let"},{"type":"text","text":", and then grab the results from there. However, doing this requires using multiple lines and handling different scopes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To solve this problem, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"type":"text","text":" has a public method method, named "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"},{"type":"text","text":". This will allow you to reference a record in one line."}]},{"type":"heading","level":2,"anchor":"Referencing-a-Record","text":"Referencing a Record"},{"type":"paragraph","inlineContent":[{"text":"You can call the method on a property that has ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"text":" as the value type:","type":"text"}]},{"code":["do {","    let postArray = atProto.searchPosts(with: \"atprotokit\")","    let post = postArray.posts[0].record.getRecord(ofType: AppBskyLexicon.Feed.PostRecord.self).text","} catch {","    \/\/ error...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s one required parameter used tell the method which "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" to decode the JSON response to. Make sure you add "},{"type":"codeVoice","code":".self"},{"type":"text","text":" at the end of the name of the "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"These are all of the requirements of ","type":"text"},{"type":"codeVoice","code":"getRecord()"},{"text":". You can continue to chain the properties as normal.","type":"text"}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/getrecordtutorial"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/getRecordTutorial"},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"],"anchor":"Related-Documentation"},{"anchor":"UnknownType","title":"UnknownType","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"],"generated":true}],"kind":"article","abstract":[{"type":"text","text":"Get records easily without explicit pattern matching in only one line."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"modules":[{"name":"ATProtoKit"}],"roleHeading":"Article","role":"article","title":"Retrieving Records with getRecord()"},"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"sections":[],"references":{"doc://ATProtoKit/documentation/ATProtoKit/UnknownType":{"navigatorTitle":[{"text":"UnknownType","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"text":"Handles decoding and encoding of records when their type is not known ahead of type.","type":"text"}],"url":"\/documentation\/atprotokit\/unknowntype","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnknownType","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","role":"symbol","title":"UnknownType"},"doc://ATProtoKit/documentation/ATProtoKit":{"type":"topic","kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","images":[{"identifier":"atprotokit_icon.png","type":"icon"}],"abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"url":"\/documentation\/atprotokit","title":"ATProtoKit","role":"collection"},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType/getRecord(ofType:)":{"role":"symbol","abstract":[{"text":"Attempts to retrieve a record of the specified type from an ","type":"text"},{"code":"UnknownType","type":"codeVoice"},{"text":" instance.","type":"text"}],"url":"\/documentation\/atprotokit\/unknowntype\/getrecord(oftype:)","title":"getRecord(ofType:)","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getRecord"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Record"},{"kind":"text","text":">("},{"kind":"externalParam","text":"ofType"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Record"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"Record"},{"kind":"text","text":"?"}]},"doc://ATProtoKit/documentation/ATProtoKit/ATRecordProtocol":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"ATRecordProtocol","kind":"identifier"}],"url":"\/documentation\/atprotokit\/atrecordprotocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ATRecordProtocol","kind":"identifier"}],"abstract":[{"text":"The common interface for record structs in the AT Protocol.","type":"text"}],"title":"ATRecordProtocol","role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol"},"doc://ATProtoKit/documentation/ATProtoKit/CodableValue":{"type":"topic","kind":"symbol","title":"CodableValue","abstract":[{"text":"A type-safe and thread-safe representation of JSON-compatible values, used for encoding and","type":"text"},{"text":" ","type":"text"},{"text":"decoding arbitrary JSON data.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue","url":"\/documentation\/atprotokit\/codablevalue","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodableValue"}],"navigatorTitle":[{"kind":"identifier","text":"CodableValue"}]},"atprotokit_icon.png":{"identifier":"atprotokit_icon.png","alt":"A technology icon representing the ATProtoKit framework.","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/ATProtoKit\/atprotokit_icon.png"}]}}}