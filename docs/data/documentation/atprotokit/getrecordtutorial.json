{"sections":[],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"Records are one of the most important aspects of the AT Protocol, as it’s what allows you to create posts, likes, reposts, and more. As a result, you’ll be referencing them often.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"All records in ATProtoKit conform to ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","isActive":true,"type":"reference"},{"type":"text","text":", and any lexicon models that have records as the value will have "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","type":"reference","isActive":true},{"text":" as the value type. Typically speaking, when referencing a record, you would use ","type":"text"},{"code":"if case let","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"guard case let"},{"type":"text","text":", and then grab the results from there. However, doing this requires using multiple lines and handling different scopes."}]},{"type":"paragraph","inlineContent":[{"text":"To solve this problem, ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","type":"reference","isActive":true},{"text":" has a public method method, named ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"},{"text":". This will allow you to reference a record in one line.","type":"text"}]},{"text":"Referencing a Record","level":2,"anchor":"Referencing-a-Record","type":"heading"},{"inlineContent":[{"text":"You can call the method on a property that has ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","isActive":true,"type":"reference"},{"type":"text","text":" as the value type:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["do {","    let postArray = atProto.searchPosts(with: \"atprotokit\")","    let post = postArray.posts[0].record.getRecord(ofType: AppBskyLexicon.Feed.PostRecord.self).text","} catch {","    \/\/ error...","}"]},{"inlineContent":[{"text":"There’s one required parameter used tell the method which ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" to decode the JSON response to. Make sure you add ","type":"text"},{"type":"codeVoice","code":".self"},{"type":"text","text":" at the end of the name of the "},{"type":"codeVoice","code":"struct"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"These are all of the requirements of ","type":"text"},{"code":"getRecord()","type":"codeVoice"},{"type":"text","text":". You can continue to chain the properties as normal."}]}],"kind":"content"}],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/getrecordtutorial"]}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"]},{"title":"UnknownType","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"],"generated":true}],"identifier":{"url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/getRecordTutorial","interfaceLanguage":"swift"},"metadata":{"role":"article","modules":[{"name":"ATProtoKit"}],"roleHeading":"Article","title":"Retrieving Records with getRecord()"},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Get records easily without explicit pattern matching in only one line.","type":"text"}],"references":{"doc://ATProtoKit/documentation/ATProtoKit/CodableValue":{"abstract":[{"type":"text","text":"A type-safe and thread-safe representation of JSON-compatible values, used for encoding and"},{"text":" ","type":"text"},{"text":"decoding arbitrary JSON data.","type":"text"}],"title":"CodableValue","url":"\/documentation\/atprotokit\/codablevalue","kind":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodableValue","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"CodableValue"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue","role":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/ATRecordProtocol":{"title":"ATRecordProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ATRecordProtocol","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","abstract":[{"text":"The common interface for record structs in the AT Protocol.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/atprotokit\/atrecordprotocol","navigatorTitle":[{"text":"ATRecordProtocol","kind":"identifier"}]},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType":{"role":"symbol","url":"\/documentation\/atprotokit\/unknowntype","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"UnknownType","kind":"identifier"}],"abstract":[{"text":"Handles decoding and encoding of records when their type is not known ahead of type.","type":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","title":"UnknownType","type":"topic","navigatorTitle":[{"kind":"identifier","text":"UnknownType"}],"kind":"symbol"},"atprotokit_icon.png":{"identifier":"atprotokit_icon.png","alt":"A technology icon representing the ATProtoKit framework.","type":"image","variants":[{"url":"\/images\/atprotokit_icon.png","traits":["1x","light"]}]},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType/getRecord(ofType:)":{"url":"\/documentation\/atprotokit\/unknowntype\/getrecord(oftype:)","role":"symbol","title":"getRecord(ofType:)","kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"getRecord"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Record"},{"kind":"text","text":">("},{"kind":"externalParam","text":"ofType"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Record"},{"text":".Type) -> ","kind":"text"},{"text":"Record","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"text":"Attempts to retrieve a record of the specified type from an ","type":"text"},{"code":"UnknownType","type":"codeVoice"},{"type":"text","text":" instance."}],"type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit":{"url":"\/documentation\/atprotokit","images":[{"identifier":"atprotokit_icon.png","type":"icon"}],"kind":"symbol","type":"topic","title":"ATProtoKit","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","role":"collection","abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}]}}}