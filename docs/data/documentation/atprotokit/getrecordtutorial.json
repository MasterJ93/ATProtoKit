{"sections":[],"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Records are one of the most important aspects of the AT Protocol, as it’s what allows you to create posts, likes, reposts, and more. As a result, you’ll be referencing them often.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All records in ATProtoKit conform to "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","isActive":true,"type":"reference"},{"text":", and any lexicon models that have records as the value will have ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","isActive":true,"type":"reference"},{"text":" as the value type. Typically speaking, when referencing a record, you would use ","type":"text"},{"type":"codeVoice","code":"if case let"},{"type":"text","text":" or "},{"code":"guard case let","type":"codeVoice"},{"type":"text","text":", and then grab the results from there. However, doing this requires using multiple lines and handling different scopes."}]},{"inlineContent":[{"type":"text","text":"To solve this problem, "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","type":"reference","isActive":true},{"type":"text","text":" has a public method method, named "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"},{"type":"text","text":". This will allow you to reference a record in one line."}],"type":"paragraph"},{"level":2,"text":"Referencing a Record","type":"heading","anchor":"Referencing-a-Record"},{"type":"paragraph","inlineContent":[{"text":"You can call the method on a property that has ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"type":"text","text":" as the value type:"}]},{"type":"codeListing","code":["do {","    let postArray = atProto.searchPosts(with: \"atprotokit\")","    let post = postArray.posts[0].record.getRecord(ofType: AppBskyLexicon.Feed.PostRecord.self).text","} catch {","    \/\/ error...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"There’s one required parameter used tell the method which ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":" to decode the JSON response to. Make sure you add ","type":"text"},{"code":".self","type":"codeVoice"},{"text":" at the end of the name of the ","type":"text"},{"code":"struct","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"These are all of the requirements of "},{"type":"codeVoice","code":"getRecord()"},{"text":". You can continue to chain the properties as normal.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"metadata":{"modules":[{"name":"ATProtoKit"}],"roleHeading":"Article","title":"Retrieving Records with getRecord()","role":"article"},"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"variants":[{"paths":["\/documentation\/atprotokit\/getrecordtutorial"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"],"title":"Related Documentation"},{"generated":true,"title":"UnknownType","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"]}],"abstract":[{"type":"text","text":"Get records easily without explicit pattern matching in only one line."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/getRecordTutorial"},"references":{"doc://ATProtoKit/documentation/ATProtoKit":{"url":"\/documentation\/atprotokit","type":"topic","role":"collection","title":"ATProtoKit","kind":"symbol","abstract":[{"text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky.","type":"text"}],"images":[{"identifier":"atprotokit_logo.png","type":"icon"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit"},"doc://ATProtoKit/documentation/ATProtoKit/ATRecordProtocol":{"url":"\/documentation\/atprotokit\/atrecordprotocol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ATRecordProtocol","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ATRecordProtocol"}],"type":"topic","title":"ATRecordProtocol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","abstract":[{"type":"text","text":"The common interface for record structs in the AT Protocol."}]},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType":{"url":"\/documentation\/atprotokit\/unknowntype","type":"topic","role":"symbol","title":"UnknownType","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnknownType"}],"navigatorTitle":[{"text":"UnknownType","kind":"identifier"}],"abstract":[{"text":"Handles decoding and encoding of records when their type is not known ahead of type.","type":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType/getRecord(ofType:)":{"url":"\/documentation\/atprotokit\/unknowntype\/getrecord(oftype:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getRecord","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Record","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"ofType","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Record","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"Record"},{"kind":"text","text":"?"}],"role":"symbol","type":"topic","title":"getRecord(ofType:)","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","abstract":[{"type":"text","text":"Attempts to retrieve a record of the specified type from an "},{"code":"UnknownType","type":"codeVoice"},{"text":" instance.","type":"text"}]},"atprotokit_logo.png":{"alt":"A technology icon representing the ATProtoKit framework.","type":"image","identifier":"atprotokit_logo.png","variants":[{"url":"\/images\/atprotokit_logo.png","traits":["1x","light"]}]},"doc://ATProtoKit/documentation/ATProtoKit/CodableValue":{"url":"\/documentation\/atprotokit\/codablevalue","type":"topic","role":"symbol","title":"CodableValue","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodableValue"}],"navigatorTitle":[{"kind":"identifier","text":"CodableValue"}],"abstract":[{"type":"text","text":"A type-safe and thread-safe representation of JSON-compatible values, used for encoding and"},{"type":"text","text":" "},{"text":"decoding arbitrary JSON data.","type":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"}}}