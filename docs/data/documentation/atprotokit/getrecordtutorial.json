{"metadata":{"title":"Retrieving Records with getRecord()","roleHeading":"Article","modules":[{"name":"ATProtoKit"}],"role":"article"},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"]},{"title":"UnknownType","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/getrecordtutorial"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Records are one of the most important aspects of the AT Protocol, as it’s what allows you to create posts, likes, reposts, and more. As a result, you’ll be referencing them often."}]},{"type":"paragraph","inlineContent":[{"text":"All records in ATProtoKit conform to ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","isActive":true},{"text":", and any lexicon models that have records as the value will have ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"type":"text","text":" as the value type. Typically speaking, when referencing a record, you would use "},{"code":"if case let","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"guard case let","type":"codeVoice"},{"text":", and then grab the results from there. However, doing this requires using multiple lines and handling different scopes.","type":"text"}]},{"inlineContent":[{"type":"text","text":"To solve this problem, "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","type":"reference","isActive":true},{"type":"text","text":" has a public method method, named "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","isActive":true},{"type":"text","text":". This will allow you to reference a record in one line."}],"type":"paragraph"},{"level":2,"anchor":"Referencing-a-Record","type":"heading","text":"Referencing a Record"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call the method on a property that has "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"text":" as the value type:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["do {","    let postArray = atProto.searchPosts(with: \"atprotokit\")","    let post = postArray.posts[0].record.getRecord(ofType: AppBskyLexicon.Feed.PostRecord.self).text","} catch {","    \/\/ error...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s one required parameter used tell the method which "},{"type":"codeVoice","code":"struct"},{"text":" to decode the JSON response to. Make sure you add ","type":"text"},{"code":".self","type":"codeVoice"},{"type":"text","text":" at the end of the name of the "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"These are all of the requirements of ","type":"text"},{"code":"getRecord()","type":"codeVoice"},{"type":"text","text":". You can continue to chain the properties as normal."}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"sections":[],"abstract":[{"type":"text","text":"Get records easily without explicit pattern matching in only one line."}],"identifier":{"url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/getRecordTutorial","interfaceLanguage":"swift"},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://ATProtoKit/documentation/ATProtoKit":{"title":"ATProtoKit","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","role":"collection","images":[{"identifier":"atprotokit_logo.png","type":"icon"}],"url":"\/documentation\/atprotokit","abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"type":"topic","kind":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType/getRecord(ofType:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"getRecord"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Record"},{"text":">(","kind":"text"},{"text":"ofType","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Record","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"Record"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","url":"\/documentation\/atprotokit\/unknowntype\/getrecord(oftype:)","kind":"symbol","abstract":[{"type":"text","text":"Attempts to retrieve a record of the specified type from an "},{"type":"codeVoice","code":"UnknownType"},{"type":"text","text":" instance."}],"type":"topic","title":"getRecord(ofType:)","role":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/ATRecordProtocol":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATRecordProtocol"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","title":"ATRecordProtocol","url":"\/documentation\/atprotokit\/atrecordprotocol","role":"symbol","abstract":[{"text":"The common interface for record structs in the AT Protocol.","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ATRecordProtocol"}]},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnknownType","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"UnknownType","kind":"identifier"}],"type":"topic","url":"\/documentation\/atprotokit\/unknowntype","abstract":[{"text":"Handles decoding and encoding of records when their type is not known ahead of type.","type":"text"}],"title":"UnknownType","role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},"atprotokit_logo.png":{"type":"image","identifier":"atprotokit_logo.png","alt":"A technology icon representing the ATProtoKit framework.","variants":[{"url":"\/images\/atprotokit_logo.png","traits":["1x","light"]}]},"doc://ATProtoKit/documentation/ATProtoKit/CodableValue":{"type":"topic","role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue","url":"\/documentation\/atprotokit\/codablevalue","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodableValue","kind":"identifier"}],"navigatorTitle":[{"text":"CodableValue","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A type-safe and thread-safe representation of JSON-compatible values, used for encoding and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding arbitrary JSON data."}],"title":"CodableValue"}}}