{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","type":"reference"},{"text":" allows you to compile the link with the appropriate metadata to create an external link card in a Bluesky post. This is a ","type":"text"},{"type":"codeVoice","code":"protocol"},{"text":", so you can use how you want to perform this task.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Getting-Started","text":"Getting Started"},{"type":"paragraph","inlineContent":[{"code":"ATLinkBuilder","type":"codeVoice"},{"text":" can be attached to a ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"class","type":"codeVoice"},{"type":"text","text":". The only required method, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)"},{"type":"text","text":", returns a tuple, which contains the URL, website title, description, and thumbnail image URL."}]},{"syntax":"swift","code":["public protocol ATLinkBuilder {","    func grabMetadata(from link: URL) async throws -> (","        url: URL,","        title: String,","        description: String?,","        thumbnailURL: URL?","    )","}"],"type":"codeListing"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"While ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" is optional, you still need a description for the embed."}]}],"name":"Note","style":"note"},{"level":2,"type":"heading","anchor":"Grabbing-the-Websites-Metadata","text":"Grabbing the Website’s Metadata"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To get the metadata of the website, you’ll need to implement "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","isActive":true},{"type":"text","text":". There’s an argument where you pass the URL so it can do its work."}]},{"inlineContent":[{"type":"text","text":"The way you implement it is up to you. You can:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"use an external API from a server that does the work for you,"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use a Swift package that can parse website metadata, or"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"write the implementation yourself from scratch."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"For this example, we’ll use a mock server that does the compilation for us and gives us the information as a JSON object.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["","public struct ExternalLinkBuilder: ATLinkBuilder {","    public func grabMetadata(from link: URL) async throws -> (url: URL, title: String, description: String?, thumbnailURL: URL?) {","        guard let serverURL = URL(string: \"https:\/\/linkBuilder.example.com\/api\/metadata?link=\\(link.absoluteString)\") else {","            throw ATLinkBuilderError.invalidURL(\"The URL, \\(link), is invalid.\")","        }","","        let (data, response) = try await URLSession.shared.data(from: serverURL)","","        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {","            throw ATLinkBuilderError.badServerResponse(string: \"Bad server response: \\(response)\")","        }","","        struct MetadataResponse: Decodable {","            let title: String","            let description: String?","            let thumbnailURL: URL?","        }","","        let decoder = JSONDecoder()","        let metadata = try decoder.decode(MetadataResponse.self, from: data)","","        return (url: link, title: metadata.title, description: metadata.description ?? \"No description given.\", thumbnailURL: metadata.thumbnailURL)","    }","}",""],"type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"It’s important to throw errors if the URL is invalid or not found. Any additional errors can be unknown. See "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError","isActive":true,"type":"reference"},{"type":"text","text":" for the list of errors to throw."}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"level":2,"text":"Integration into ATProtoBluesky","type":"heading","anchor":"Integration-into-ATProtoBluesky"},{"inlineContent":[{"text":"Once you’ve completed creating the ","type":"text"},{"code":"ATLinkBuilder","type":"codeVoice"},{"type":"text","text":"-conforming object, you can put this as an argument in "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","type":"reference","isActive":true},{"text":". The ","type":"text"},{"type":"codeVoice","code":"class"},{"text":" contains an argument named ","type":"text"},{"code":"linkBuilder","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let config = ATProtocolConfiguration(","    handle: \"example.bsky.social\",","    appPassword: \"hunter2\"",")","","Task {","    do {","        \/\/ Create an instance of the conforming object...","        let externalEmbedBuilder = ExternalLinkBuilder()","","        let session = try await config.authenticate()","","        guard let link = URL(string: \"https:\/\/bsky.social\/about\/blog\/04-01-2024-bluesky-shorts\") else { return }","        let metadata = try await externalEmbedBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","","        let atProtoBluesky = ATProtoBluesky(","            atProtoKitInstance: atProto,","            linkbuilder: externalEmbedBuilder \/\/ ... and add the object in here.","        )","","    } catch {","        \/\/ Handle error...","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"You can then create a post as normal using ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The method will automatically take the first link it detects and use it as the external website card."}]},{"text":"Manually Creating a Website Card","level":2,"type":"heading","anchor":"Manually-Creating-a-Website-Card"},{"type":"paragraph","inlineContent":[{"text":"Optionally, you can also use the ","type":"text"},{"type":"codeVoice","code":"embed"},{"type":"text","text":" argument of "},{"type":"codeVoice","code":"createPostRecord()"},{"text":". When doing so, you can use the ","type":"text"},{"type":"codeVoice","code":"ATLinkBuilder"},{"text":"-conforming object to grab the metadata and paste the result. This is useful for when you want to create a post that doesn’t doesn’t have the link copied over to the website card.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["Task {","    do {","        let session = try await config.authenticate()","","        let externalLinkBuilder = ExternalLinkBuilder()","","        guard let link = URL(string: \"https:\/\/www.nintendo.com\/\") else { return }","        let metadata = try await externalLinkBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","        let atProtoBluesky = ATProtoBluesky(atProtoKitInstance: atProto)","","        let postResult = try await atProtoBluesky.createPostRecord(","            text: \"Testing the link builder:\\n\\nhttps:\/\/www.apple.com\/\",","            embed: .external(","                url: metadata.url,","                title: metadata.title,","                description: metadata.description ?? \"No description given.\",","                thumbnailURL: metadata.thumbnailURL","            )","        )","","        print(\"Post Result: \\(postResult)\")","    } catch {","        throw error","    }","}"]}]}],"sections":[],"abstract":[{"type":"text","text":"Grab metadata from URLs so you can attach them to a website card in a Bluesky post."}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky"]]},"seeAlsoSections":[{"title":"Creating Posts","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder"],"generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderProtocol"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/atlinkbuilderprotocol"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"article","roleHeading":"Article","title":"Creating Link Previews with ATLinkBuilder","modules":[{"name":"ATProtoKit"}]},"kind":"article","references":{"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder/grabMetadata(from:)":{"url":"\/documentation\/atprotokit\/atlinkbuilder\/grabmetadata(from:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"grabMetadata","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10Foundation3URLV","text":"URL","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> (url","kind":"text"},{"text":": ","kind":"text"},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"text":", title","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", description","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":"?, thumbnailURL","kind":"text"},{"text":": ","kind":"text"},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"text":"?)","kind":"text"}],"required":true,"abstract":[{"text":"Fills the properties of the ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":" conforming to "},{"type":"codeVoice","code":"ATLinkBuilder"},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","role":"symbol","kind":"symbol","title":"grabMetadata(from:)"},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky":{"url":"\/documentation\/atprotokit\/atprotobluesky","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ATProtoBluesky"}],"abstract":[{"type":"text","text":"The base class that handles all direct Bluesky-related functionality of the ATProtoKit"},{"text":" ","type":"text"},{"type":"text","text":"API library."}],"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","role":"symbol","navigatorTitle":[{"text":"ATProtoBluesky","kind":"identifier"}],"kind":"symbol","title":"ATProtoBluesky"},"doc://ATProtoKit/documentation/ATProtoKit":{"url":"\/documentation\/atprotokit","images":[{"identifier":"atprotokit_icon.png","type":"icon"}],"kind":"symbol","type":"topic","title":"ATProtoKit","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","role":"collection","abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}]},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)":{"url":"\/documentation\/atprotokit\/atprotobluesky\/createpostrecord(text:inlinefacets:locales:replyto:embed:labels:tags:creationdate:recordkey:shouldvalidate:swapcommit:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"createPostRecord","kind":"identifier"},{"text":"(","kind":"text"},{"text":"text","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"text":"inlineFacets","kind":"externalParam"},{"text":": [(url","kind":"text"},{"text":": ","kind":"text"},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"kind":"text","text":", startPosition"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", endPosition"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")]?, "},{"text":"locales","kind":"externalParam"},{"text":": [","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation6LocaleV","text":"Locale"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"replyTo"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconO","text":"AppBskyLexicon","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconO4FeedO","text":"Feed","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconO4FeedO10PostRecordV","kind":"typeIdentifier","text":"PostRecord"},{"kind":"text","text":"."},{"text":"ReplyReference","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconO4FeedO10PostRecordV14ReplyReferenceV","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"embed"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC","text":"ATProtoBluesky"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC15EmbedIdentifierO","text":"EmbedIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"labels"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO","text":"ComAtprotoLexicon","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Label","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO5LabelO"},{"text":".","kind":"text"},{"text":"SelfLabelsDefinition","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO5LabelO20SelfLabelsDefinitionV","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"tags"},{"text":": [","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":"]?, ","kind":"text"},{"kind":"externalParam","text":"creationDate"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV","text":"Date"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"recordKey"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"shouldValidate","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":"?, ","kind":"text"},{"text":"swapCommit","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO","text":"ComAtprotoLexicon","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Repository","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO10RepositoryO"},{"kind":"text","text":"."},{"text":"StrongReference","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO10RepositoryO15StrongReferenceV","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"A convenience method to create a post record to the user account in Bluesky."}],"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","role":"symbol","kind":"symbol","title":"createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)"},"atprotokit_icon.png":{"identifier":"atprotokit_icon.png","variants":[{"url":"\/images\/atprotokit_icon.png","traits":["1x","light"]}],"alt":"A technology icon representing the ATProtoKit framework.","type":"image"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder":{"url":"\/documentation\/atprotokit\/atlinkbuilder","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ATLinkBuilder","kind":"identifier"}],"abstract":[{"text":"A protocol used to easily access the metadata for a website.","type":"text"}],"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","role":"symbol","navigatorTitle":[{"text":"ATLinkBuilder","kind":"identifier"}],"kind":"symbol","title":"ATLinkBuilder"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilderError":{"url":"\/documentation\/atprotokit\/atlinkbuildererror","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATLinkBuilderError"}],"abstract":[{"text":"An error type related to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder"},{"text":"-related issues.","type":"text"}],"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError","role":"symbol","navigatorTitle":[{"text":"ATLinkBuilderError","kind":"identifier"}],"kind":"symbol","title":"ATLinkBuilderError"}}}