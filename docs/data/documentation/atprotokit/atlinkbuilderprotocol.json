{"metadata":{"role":"article","modules":[{"name":"ATProtoKit"}],"title":"Creating Link Previews with ATLinkBuilder","roleHeading":"Article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderProtocol"},"sections":[],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","abstract":[{"type":"text","text":"Grab metadata from URLs so you can attach them to a website card in a Bluesky post."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/atlinkbuilderprotocol"]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder"},{"type":"text","text":" allows you to compile the link with the appropriate metadata to create an external link card in a Bluesky post. This is a "},{"type":"codeVoice","code":"protocol"},{"text":", so you can use how you want to perform this task.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Getting-Started","text":"Getting Started","level":3},{"inlineContent":[{"code":"ATLinkBuilder","type":"codeVoice"},{"type":"text","text":" can be attached to a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" or "},{"code":"class","type":"codeVoice"},{"type":"text","text":". The only required method, "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","isActive":true},{"text":", returns a tuple, which contains the URL, website title, description, and thumbnail image URL.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["public protocol ATLinkBuilder {","    func grabMetadata(from link: URL) async throws -> (","        url: URL,","        title: String,","        description: String?,","        thumbnailURL: URL?","    )","}"],"type":"codeListing"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"While "},{"type":"codeVoice","code":"description"},{"text":" is optional, you still need a description for the embed.","type":"text"}],"type":"paragraph"}]},{"type":"heading","text":"Grabbing the Website’s Metadata","anchor":"Grabbing-the-Websites-Metadata","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To get the metadata of the website, you’ll need to implement "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)"},{"type":"text","text":". There’s an argument where you pass the URL so it can do its work."}]},{"inlineContent":[{"text":"The way you implement it is up to you. You can:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"use an external API from a server that does the work for you,","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use a Swift package that can parse website metadata, or"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"write the implementation yourself from scratch."}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"For this example, we’ll use a mock server that does the compilation for us and gives us the information as a JSON object.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["","public struct ExternalLinkBuilder: ATLinkBuilder {","    public func grabMetadata(from link: URL) async throws -> (url: URL, title: String, description: String?, thumbnailURL: URL?) {","        guard let serverURL = URL(string: \"https:\/\/linkBuilder.example.com\/api\/metadata?link=\\(link.absoluteString)\") else {","            throw ATLinkBuilderError.invalidURL(\"The URL, \\(link), is invalid.\")","        }","","        let (data, response) = try await URLSession.shared.data(from: serverURL)","","        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {","            throw ATLinkBuilderError.badServerResponse(string: \"Bad server response: \\(response)\")","        }","","        struct MetadataResponse: Decodable {","            let title: String","            let description: String?","            let thumbnailURL: URL?","        }","","        let decoder = JSONDecoder()","        let metadata = try decoder.decode(MetadataResponse.self, from: data)","","        return (url: link, title: metadata.title, description: metadata.description ?? \"No description given.\", thumbnailURL: metadata.thumbnailURL)","    }","}",""],"syntax":"swift"},{"style":"note","content":[{"inlineContent":[{"text":"It’s important to throw errors if the URL is invalid or not found. Any additional errors can be unknown. See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError","type":"reference"},{"type":"text","text":" for the list of errors to throw."}],"type":"paragraph"}],"name":"Note","type":"aside"},{"level":2,"anchor":"Integration-into-ATProtoBluesky","text":"Integration into ATProtoBluesky","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Once you’ve completed creating the ","type":"text"},{"type":"codeVoice","code":"ATLinkBuilder"},{"type":"text","text":"-conforming object, you can put this as an argument in "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","isActive":true,"type":"reference"},{"type":"text","text":". The "},{"type":"codeVoice","code":"class"},{"text":" contains an argument named ","type":"text"},{"type":"codeVoice","code":"linkBuilder"},{"text":":","type":"text"}]},{"code":["let config = ATProtocolConfiguration(","    handle: \"example.bsky.social\",","    appPassword: \"hunter2\"",")","","Task {","    do {","        \/\/ Create an instance of the conforming object...","        let externalEmbedBuilder = ExternalLinkBuilder()","","        let session = try await config.authenticate()","","        guard let link = URL(string: \"https:\/\/bsky.social\/about\/blog\/04-01-2024-bluesky-shorts\") else { return }","        let metadata = try await externalEmbedBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","","        let atProtoBluesky = ATProtoBluesky(","            atProtoKitInstance: atProto,","            linkbuilder: externalEmbedBuilder \/\/ ... and add the object in here.","        )","","    } catch {","        \/\/ Handle error...","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"You can then create a post as normal using ","type":"text"},{"identifier":"``ATProtoBluesky\/createPostRecord(text:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)``","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The mthod will automatically take the first link it detects and use it as the external website card."}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Manually-Creating-a-Website-Card","text":"Manually Creating a Website Card"},{"inlineContent":[{"type":"text","text":"Optionally, you can also use the "},{"code":"embed","type":"codeVoice"},{"text":" argument of ","type":"text"},{"type":"codeVoice","code":"createPostRecord()"},{"type":"text","text":". When doing so, you can use the "},{"type":"codeVoice","code":"ATLinkBuilder"},{"type":"text","text":"-conforming object to grab the metadata and paste the result. This is useful for when you want to create a post that doesn’t doesn’t have the link copied over to the website card."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Task {","    do {","        let session = try await config.authenticate()","","        let externalLinkBuilder = ExternalLinkBuilder()","","        guard let link = URL(string: \"https:\/\/www.nintendo.com\/\") else { return }","        let metadata = try await externalLinkBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","        let atProtoBluesky = ATProtoBluesky(atProtoKitInstance: atProto)","","        let postResult = try await atProtoBluesky.createPostRecord(","            text: \"Testing the link builder:\\n\\nhttps:\/\/www.apple.com\/\",","            embed: .external(","                url: metadata.url,","                title: metadata.title,","                description: metadata.description ?? \"No description given.\",","                thumbnailURL: metadata.thumbnailURL","            )","        )","","        print(\"Post Result: \\(postResult)\")","    } catch {","        throw error","    }","}"]}]}],"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder/grabMetadata(from:)":{"role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","url":"\/documentation\/atprotokit\/atlinkbuilder\/grabmetadata(from:)","type":"topic","abstract":[{"type":"text","text":"Fills the properties of the "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" conforming to "},{"type":"codeVoice","code":"ATLinkBuilder"},{"type":"text","text":"."}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"grabMetadata","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier","text":"URL"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> (url","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation3URLV","text":"URL","kind":"typeIdentifier"},{"text":", title","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", description","kind":"text"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"?, thumbnailURL"},{"text":": ","kind":"text"},{"text":"URL","preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier"},{"kind":"text","text":"?)"}],"title":"grabMetadata(from:)","required":true},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder":{"title":"ATLinkBuilder","navigatorTitle":[{"kind":"identifier","text":"ATLinkBuilder"}],"kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","role":"symbol","url":"\/documentation\/atprotokit\/atlinkbuilder","abstract":[{"type":"text","text":"A protocol used to easily access the metadata for a website."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATLinkBuilder"}],"type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilderError":{"title":"ATLinkBuilderError","navigatorTitle":[{"kind":"identifier","text":"ATLinkBuilderError"}],"kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError","role":"symbol","url":"\/documentation\/atprotokit\/atlinkbuildererror","abstract":[{"text":"An error type related to ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","type":"reference","isActive":true},{"type":"text","text":"-related issues."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATLinkBuilderError"}],"type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit":{"type":"topic","role":"collection","title":"ATProtoKit","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","images":[{"type":"icon","identifier":"atprotokit_logo.png"}],"abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"url":"\/documentation\/atprotokit","kind":"symbol"},"atprotokit_logo.png":{"alt":"A technology icon representing the ATProtoKit framework.","variants":[{"url":"\/images\/atprotokit_logo.png","traits":["1x","light"]}],"type":"image","identifier":"atprotokit_logo.png"},"``ATProtoBluesky/createPostRecord(text:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)``":{"title":"createPostRecord()","url":"``ATProtoBluesky\/createPostRecord(text:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)``","titleInlineContent":[{"code":"createPostRecord()","type":"codeVoice"}],"identifier":"``ATProtoBluesky\/createPostRecord(text:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)``","type":"link"},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky":{"abstract":[{"type":"text","text":"The base class that handles all direct Bluesky-related functionality of the ATProtoKit"},{"text":" ","type":"text"},{"text":"API library.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ATProtoBluesky","kind":"identifier"}],"title":"ATProtoBluesky","navigatorTitle":[{"text":"ATProtoBluesky","kind":"identifier"}],"url":"\/documentation\/atprotokit\/atprotobluesky","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","role":"symbol"}}}