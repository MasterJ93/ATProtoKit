{"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/atlinkbuilderprotocol"]}],"metadata":{"modules":[{"name":"ATProtoKit"}],"title":"Creating Link Previews with ATLinkBuilder","role":"article","roleHeading":"Article"},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/deletePostRecord(_:)"],"generated":true,"title":"Managing Posts"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderProtocol"},"abstract":[{"type":"text","text":"Grab metadata from URLs so you can attach them to a website card in a Bluesky post."}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","type":"reference","isActive":true},{"text":" allows you to compile the link with the appropriate metadata to create an external link card in a Bluesky post. This is a ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":", so you can use how you want to perform this task.","type":"text"}]},{"level":3,"text":"Getting Started","anchor":"Getting-Started","type":"heading"},{"inlineContent":[{"code":"ATLinkBuilder","type":"codeVoice"},{"text":" can be attached to a ","type":"text"},{"code":"struct","type":"codeVoice"},{"type":"text","text":" or "},{"code":"class","type":"codeVoice"},{"type":"text","text":". The only required method, "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","isActive":true},{"type":"text","text":", returns a tuple, which contains the URL, website title, description, and thumbnail image URL."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public protocol ATLinkBuilder {","    func grabMetadata(from link: URL) async throws -> (","        url: URL,","        title: String,","        description: String?,","        thumbnailURL: URL?","    )","}"]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"text":"While ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" is optional, you still need a description for the embed."}],"type":"paragraph"}]},{"level":2,"text":"Grabbing the Website’s Metadata","type":"heading","anchor":"Grabbing-the-Websites-Metadata"},{"inlineContent":[{"type":"text","text":"To get the metadata of the website, you’ll need to implement "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)"},{"type":"text","text":". There’s an argument where you pass the URL so it can do its work."}],"type":"paragraph"},{"inlineContent":[{"text":"The way you implement it is up to you. You can:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"use an external API from a server that does the work for you,","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"use a Swift package that can parse website metadata, or","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"write the implementation yourself from scratch.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this example, we’ll use a mock server that does the compilation for us and gives us the information as a JSON object."}]},{"code":["","public struct ExternalLinkBuilder: ATLinkBuilder {","    public func grabMetadata(from link: URL) async throws -> (url: URL, title: String, description: String?, thumbnailURL: URL?) {","        guard let serverURL = URL(string: \"https:\/\/linkBuilder.example.com\/api\/metadata?link=\\(link.absoluteString)\") else {","            throw ATLinkBuilderError.invalidURL(\"The URL, \\(link), is invalid.\")","        }","","        let (data, response) = try await URLSession.shared.data(from: serverURL)","","        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {","            throw ATLinkBuilderError.badServerResponse(string: \"Bad server response: \\(response)\")","        }","","        struct MetadataResponse: Decodable {","            let title: String","            let description: String?","            let thumbnailURL: URL?","        }","","        let decoder = JSONDecoder()","        let metadata = try decoder.decode(MetadataResponse.self, from: data)","","        return (url: link, title: metadata.title, description: metadata.description ?? \"No description given.\", thumbnailURL: metadata.thumbnailURL)","    }","}",""],"syntax":"swift","type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"It’s important to throw errors if the URL is invalid or not found. Any additional errors can be unknown. See "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError","isActive":true},{"type":"text","text":" for the list of errors to throw."}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"type":"heading","text":"Integration into ATProtoBluesky","level":2,"anchor":"Integration-into-ATProtoBluesky"},{"type":"paragraph","inlineContent":[{"text":"Once you’ve completed creating the ","type":"text"},{"type":"codeVoice","code":"ATLinkBuilder"},{"text":"-conforming object, you can put this as an argument in ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","isActive":true},{"type":"text","text":". The "},{"code":"class","type":"codeVoice"},{"text":" contains an argument named ","type":"text"},{"type":"codeVoice","code":"linkBuilder"},{"text":":","type":"text"}]},{"code":["let config = ATProtocolConfiguration(","    handle: \"example.bsky.social\",","    appPassword: \"hunter2\"",")","","Task {","    do {","        \/\/ Create an instance of the conforming object...","        let externalEmbedBuilder = ExternalLinkBuilder()","","        let session = try await config.authenticate()","","        guard let link = URL(string: \"https:\/\/bsky.social\/about\/blog\/04-01-2024-bluesky-shorts\") else { return }","        let metadata = try await externalEmbedBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","","        let atProtoBluesky = ATProtoBluesky(","            atProtoKitInstance: atProto,","            linkbuilder: externalEmbedBuilder \/\/ ... and add the object in here.","        )","","    } catch {","        \/\/ Handle error...","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can then create a post as normal using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The method will automatically take the first link it detects and use it as the external website card."}]},{"level":2,"type":"heading","text":"Manually Creating a Website Card","anchor":"Manually-Creating-a-Website-Card"},{"inlineContent":[{"type":"text","text":"Optionally, you can also use the "},{"code":"embed","type":"codeVoice"},{"text":" argument of ","type":"text"},{"code":"createPostRecord()","type":"codeVoice"},{"type":"text","text":". When doing so, you can use the "},{"type":"codeVoice","code":"ATLinkBuilder"},{"type":"text","text":"-conforming object to grab the metadata and paste the result. This is useful for when you want to create a post that doesn’t doesn’t have the link copied over to the website card."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Task {","    do {","        let session = try await config.authenticate()","","        let externalLinkBuilder = ExternalLinkBuilder()","","        guard let link = URL(string: \"https:\/\/www.nintendo.com\/\") else { return }","        let metadata = try await externalLinkBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","        let atProtoBluesky = ATProtoBluesky(atProtoKitInstance: atProto)","","        let postResult = try await atProtoBluesky.createPostRecord(","            text: \"Testing the link builder:\\n\\nhttps:\/\/www.apple.com\/\",","            embed: .external(","                url: metadata.url,","                title: metadata.title,","                description: metadata.description ?? \"No description given.\",","                thumbnailURL: metadata.thumbnailURL","            )","        )","","        print(\"Post Result: \\(postResult)\")","    } catch {","        throw error","    }","}"]}]}],"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"createPostRecord"},{"text":"(","kind":"text"},{"text":"text","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"inlineFacets"},{"kind":"text","text":": [(url"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10Foundation3URLV","text":"URL","kind":"typeIdentifier"},{"kind":"text","text":", startPosition"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", endPosition"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")]?, ","kind":"text"},{"text":"locales","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"Locale","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation6LocaleV"},{"text":"], ","kind":"text"},{"text":"replyTo","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"AppBskyLexicon","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV","text":"Feed"},{"kind":"text","text":"."},{"text":"PostRecord","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV10PostRecordV"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"ReplyReference","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV10PostRecordV14ReplyReferenceV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"embed"},{"text":": ","kind":"text"},{"text":"ATProtoBluesky","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit0A7BlueskyC15EmbedIdentifierO","kind":"typeIdentifier","text":"EmbedIdentifier"},{"text":"?, ","kind":"text"},{"text":"labels","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit7ATUnionV","text":"ATUnion"},{"text":".","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit7ATUnionV19PostSelfLabelsUnionO","kind":"typeIdentifier","text":"PostSelfLabelsUnion"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"tags"},{"text":": [","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?, "},{"kind":"externalParam","text":"creationDate"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Date","preciseIdentifier":"s:10Foundation4DateV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"recordKey"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"shouldValidate"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"swapCommit"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"?) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV","text":"ComAtprotoLexicon"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV10RepositoryV","text":"Repository"},{"kind":"text","text":"."},{"text":"StrongReference","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV10RepositoryV15StrongReferenceV","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"A convenience method to create a post record to the user account in Bluesky."}],"url":"\/documentation\/atprotokit\/atprotobluesky\/createpostrecord(text:inlinefacets:locales:replyto:embed:labels:tags:creationdate:recordkey:shouldvalidate:swapcommit:)","title":"createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","type":"topic","role":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder/grabMetadata(from:)":{"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","abstract":[{"type":"text","text":"Fills the properties of the "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" conforming to "},{"code":"ATLinkBuilder","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/atprotokit\/atlinkbuilder\/grabmetadata(from:)","required":true,"title":"grabMetadata(from:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"grabMetadata","kind":"identifier"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> (url","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation3URLV","text":"URL","kind":"typeIdentifier"},{"text":", title","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", description"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?, thumbnailURL"},{"text":": ","kind":"text"},{"text":"URL","preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier"},{"kind":"text","text":"?)"}]},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky":{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","abstract":[{"type":"text","text":"The base class that handles all direct Bluesky-related functionality of the ATProtoKit"},{"text":" ","type":"text"},{"type":"text","text":"API library."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ATProtoBluesky"}],"navigatorTitle":[{"text":"ATProtoBluesky","kind":"identifier"}],"url":"\/documentation\/atprotokit\/atprotobluesky","kind":"symbol","role":"symbol","type":"topic","title":"ATProtoBluesky"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder":{"abstract":[{"text":"A protocol used to easily access the metadata for a website.","type":"text"}],"title":"ATLinkBuilder","url":"\/documentation\/atprotokit\/atlinkbuilder","role":"symbol","navigatorTitle":[{"text":"ATLinkBuilder","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ATLinkBuilder","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","kind":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit":{"kind":"symbol","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","images":[{"identifier":"atprotokit_icon.png","type":"icon"}],"role":"collection","abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"url":"\/documentation\/atprotokit","title":"ATProtoKit"},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky/deletePostRecord(_:)":{"url":"\/documentation\/atprotokit\/atprotobluesky\/deletepostrecord(_:)","title":"deletePostRecord(_:)","kind":"symbol","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/deletePostRecord(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"deletePostRecord"},{"text":"(","kind":"text"},{"text":"ATProtoBluesky","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC16RecordIdentifierO","text":"RecordIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"role":"symbol","abstract":[{"type":"text","text":"Deletes a post record."}]},"atprotokit_icon.png":{"identifier":"atprotokit_icon.png","type":"image","alt":"A technology icon representing the ATProtoKit framework.","variants":[{"traits":["1x","light"],"url":"\/images\/atprotokit_icon.png"}]},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilderError":{"abstract":[{"text":"An error type related to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder"},{"text":"-related issues.","type":"text"}],"title":"ATLinkBuilderError","url":"\/documentation\/atprotokit\/atlinkbuildererror","role":"symbol","navigatorTitle":[{"text":"ATLinkBuilderError","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ATLinkBuilderError","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError","kind":"symbol"}}}