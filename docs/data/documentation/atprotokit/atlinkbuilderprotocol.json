{"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/deletePostRecord(_:)"],"title":"Managing Posts"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","isActive":true,"type":"reference"},{"text":" allows you to compile the link with the appropriate metadata to create an external link card in a Bluesky post. This is a ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":", so you can use how you want to perform this task.","type":"text"}],"type":"paragraph"},{"text":"Getting Started","type":"heading","level":3,"anchor":"Getting-Started"},{"type":"paragraph","inlineContent":[{"code":"ATLinkBuilder","type":"codeVoice"},{"type":"text","text":" can be attached to a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" or "},{"code":"class","type":"codeVoice"},{"text":". The only required method, ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","isActive":true},{"text":", returns a tuple, which contains the URL, website title, description, and thumbnail image URL.","type":"text"}]},{"code":["public protocol ATLinkBuilder {","    func grabMetadata(from link: URL) async throws -> (","        url: URL,","        title: String,","        description: String?,","        thumbnailURL: URL?","    )","}"],"type":"codeListing","syntax":"swift"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"While ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":" is optional, you still need a description for the embed."}]}]},{"level":2,"anchor":"Grabbing-the-Websites-Metadata","text":"Grabbing the Website’s Metadata","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To get the metadata of the website, you’ll need to implement "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","type":"reference","isActive":true},{"type":"text","text":". There’s an argument where you pass the URL so it can do its work."}]},{"type":"paragraph","inlineContent":[{"text":"The way you implement it is up to you. You can:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use an external API from a server that does the work for you,"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use a Swift package that can parse website metadata, or"}]}]},{"content":[{"inlineContent":[{"text":"write the implementation yourself from scratch.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"For this example, we’ll use a mock server that does the compilation for us and gives us the information as a JSON object.","type":"text"}]},{"code":["","public struct ExternalLinkBuilder: ATLinkBuilder {","    public func grabMetadata(from link: URL) async throws -> (url: URL, title: String, description: String?, thumbnailURL: URL?) {","        guard let serverURL = URL(string: \"https:\/\/linkBuilder.example.com\/api\/metadata?link=\\(link.absoluteString)\") else {","            throw ATLinkBuilderError.invalidURL(\"The URL, \\(link), is invalid.\")","        }","","        let (data, response) = try await URLSession.shared.data(from: serverURL)","","        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {","            throw ATLinkBuilderError.badServerResponse(string: \"Bad server response: \\(response)\")","        }","","        struct MetadataResponse: Decodable {","            let title: String","            let description: String?","            let thumbnailURL: URL?","        }","","        let decoder = JSONDecoder()","        let metadata = try decoder.decode(MetadataResponse.self, from: data)","","        return (url: link, title: metadata.title, description: metadata.description ?? \"No description given.\", thumbnailURL: metadata.thumbnailURL)","    }","}",""],"type":"codeListing","syntax":"swift"},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"It’s important to throw errors if the URL is invalid or not found. Any additional errors can be unknown. See "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError","type":"reference","isActive":true},{"text":" for the list of errors to throw.","type":"text"}],"type":"paragraph"}]},{"level":2,"type":"heading","anchor":"Integration-into-ATProtoBluesky","text":"Integration into ATProtoBluesky"},{"type":"paragraph","inlineContent":[{"text":"Once you’ve completed creating the ","type":"text"},{"type":"codeVoice","code":"ATLinkBuilder"},{"type":"text","text":"-conforming object, you can put this as an argument in "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","isActive":true},{"text":". The ","type":"text"},{"type":"codeVoice","code":"class"},{"type":"text","text":" contains an argument named "},{"type":"codeVoice","code":"linkBuilder"},{"type":"text","text":":"}]},{"code":["let config = ATProtocolConfiguration(","    handle: \"example.bsky.social\",","    appPassword: \"hunter2\"",")","","Task {","    do {","        \/\/ Create an instance of the conforming object...","        let externalEmbedBuilder = ExternalLinkBuilder()","","        let session = try await config.authenticate()","","        guard let link = URL(string: \"https:\/\/bsky.social\/about\/blog\/04-01-2024-bluesky-shorts\") else { return }","        let metadata = try await externalEmbedBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","","        let atProtoBluesky = ATProtoBluesky(","            atProtoKitInstance: atProto,","            linkbuilder: externalEmbedBuilder \/\/ ... and add the object in here.","        )","","    } catch {","        \/\/ Handle error...","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can then create a post as normal using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The method will automatically take the first link it detects and use it as the external website card.","type":"text"}]},{"anchor":"Manually-Creating-a-Website-Card","text":"Manually Creating a Website Card","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optionally, you can also use the "},{"code":"embed","type":"codeVoice"},{"type":"text","text":" argument of "},{"code":"createPostRecord()","type":"codeVoice"},{"type":"text","text":". When doing so, you can use the "},{"type":"codeVoice","code":"ATLinkBuilder"},{"type":"text","text":"-conforming object to grab the metadata and paste the result. This is useful for when you want to create a post that doesn’t doesn’t have the link copied over to the website card."}]},{"syntax":"swift","type":"codeListing","code":["Task {","    do {","        let session = try await config.authenticate()","","        let externalLinkBuilder = ExternalLinkBuilder()","","        guard let link = URL(string: \"https:\/\/www.nintendo.com\/\") else { return }","        let metadata = try await externalLinkBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","        let atProtoBluesky = ATProtoBluesky(atProtoKitInstance: atProto)","","        let postResult = try await atProtoBluesky.createPostRecord(","            text: \"Testing the link builder:\\n\\nhttps:\/\/www.apple.com\/\",","            embed: .external(","                url: metadata.url,","                title: metadata.title,","                description: metadata.description ?? \"No description given.\",","                thumbnailURL: metadata.thumbnailURL","            )","        )","","        print(\"Post Result: \\(postResult)\")","    } catch {","        throw error","    }","}"]}]}],"variants":[{"paths":["\/documentation\/atprotokit\/atlinkbuilderprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderProtocol"},"kind":"article","hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky"]]},"sections":[],"abstract":[{"text":"Grab metadata from URLs so you can attach them to a website card in a Bluesky post.","type":"text"}],"metadata":{"modules":[{"name":"ATProtoKit"}],"roleHeading":"Article","role":"article","title":"Creating Link Previews with ATLinkBuilder"},"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky/deletePostRecord(_:)":{"abstract":[{"type":"text","text":"Deletes a post record."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/deletePostRecord(_:)","url":"\/documentation\/atprotokit\/atprotobluesky\/deletepostrecord(_:)","title":"deletePostRecord(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"deletePostRecord"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit0A7BlueskyC","text":"ATProtoBluesky","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"RecordIdentifier","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC16RecordIdentifierO"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"}],"type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilderError":{"navigatorTitle":[{"kind":"identifier","text":"ATLinkBuilderError"}],"abstract":[{"type":"text","text":"An error type related to "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","isActive":true},{"text":"-related issues.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"ATLinkBuilderError","kind":"identifier"}],"url":"\/documentation\/atprotokit\/atlinkbuildererror","type":"topic","role":"symbol","kind":"symbol","title":"ATLinkBuilderError","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError"},"doc://ATProtoKit/documentation/ATProtoKit":{"abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"images":[{"identifier":"atprotokit_icon.png","type":"icon"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","url":"\/documentation\/atprotokit","type":"topic","role":"collection","title":"ATProtoKit","kind":"symbol"},"atprotokit_icon.png":{"variants":[{"url":"\/images\/atprotokit_icon.png","traits":["1x","light"]}],"alt":"A technology icon representing the ATProtoKit framework.","identifier":"atprotokit_icon.png","type":"image"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder":{"navigatorTitle":[{"kind":"identifier","text":"ATLinkBuilder"}],"abstract":[{"type":"text","text":"A protocol used to easily access the metadata for a website."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ATLinkBuilder","kind":"identifier"}],"url":"\/documentation\/atprotokit\/atlinkbuilder","type":"topic","role":"symbol","kind":"symbol","title":"ATLinkBuilder","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder"},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)":{"abstract":[{"type":"text","text":"A convenience method to create a post record to the user account in Bluesky."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"createPostRecord","kind":"identifier"},{"text":"(","kind":"text"},{"text":"text","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"text":"inlineFacets","kind":"externalParam"},{"text":": [(url","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"text":", startPosition","kind":"text"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", endPosition","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":")]?, ","kind":"text"},{"kind":"externalParam","text":"locales"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation6LocaleV","text":"Locale"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"replyTo"},{"text":": ","kind":"text"},{"text":"AppBskyLexicon","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV","kind":"typeIdentifier","text":"Feed"},{"kind":"text","text":"."},{"text":"PostRecord","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV10PostRecordV","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"ReplyReference","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV10PostRecordV14ReplyReferenceV","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"embed"},{"text":": ","kind":"text"},{"text":"ATProtoBluesky","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC"},{"kind":"text","text":"."},{"preciseIdentifier":"s:10ATProtoKit0A7BlueskyC15EmbedIdentifierO","kind":"typeIdentifier","text":"EmbedIdentifier"},{"kind":"text","text":"?, "},{"text":"labels","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ATUnion","preciseIdentifier":"s:10ATProtoKit7ATUnionV","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"PostSelfLabelsUnion","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit7ATUnionV19PostSelfLabelsUnionO"},{"text":"?, ","kind":"text"},{"text":"tags","kind":"externalParam"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":"]?, ","kind":"text"},{"kind":"externalParam","text":"creationDate"},{"kind":"text","text":": "},{"text":"Date","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV"},{"kind":"text","text":", "},{"text":"recordKey","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":"?, "},{"text":"shouldValidate","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":"?, ","kind":"text"},{"text":"swapCommit","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV","text":"ComAtprotoLexicon","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Repository","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV10RepositoryV"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV10RepositoryV15StrongReferenceV","text":"StrongReference"}],"kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","title":"createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","url":"\/documentation\/atprotokit\/atprotobluesky\/createpostrecord(text:inlinefacets:locales:replyto:embed:labels:tags:creationdate:recordkey:shouldvalidate:swapcommit:)","role":"symbol","type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder/grabMetadata(from:)":{"abstract":[{"text":"Fills the properties of the ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":" conforming to ","type":"text"},{"type":"codeVoice","code":"ATLinkBuilder"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","url":"\/documentation\/atprotokit\/atlinkbuilder\/grabmetadata(from:)","required":true,"title":"grabMetadata(from:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"grabMetadata","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation3URLV","text":"URL","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> (url"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation3URLV","text":"URL","kind":"typeIdentifier"},{"kind":"text","text":", title"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":", description"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"?, thumbnailURL"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10Foundation3URLV","text":"URL","kind":"typeIdentifier"},{"kind":"text","text":"?)"}],"type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky":{"abstract":[{"type":"text","text":"The base class that handles all direct Bluesky-related functionality of the ATProtoKit"},{"type":"text","text":" "},{"text":"API library.","type":"text"}],"title":"ATProtoBluesky","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATProtoBluesky"}],"kind":"symbol","navigatorTitle":[{"text":"ATProtoBluesky","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","type":"topic","url":"\/documentation\/atprotokit\/atprotobluesky"}}}