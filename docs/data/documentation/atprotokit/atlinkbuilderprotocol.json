{"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","isActive":true,"type":"reference"},{"text":" allows you to compile the link with the appropriate metadata to create an external link card in a Bluesky post. This is a ","type":"text"},{"type":"codeVoice","code":"protocol"},{"type":"text","text":", so you can use how you want to perform this task."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Getting Started","anchor":"Getting-Started"},{"inlineContent":[{"code":"ATLinkBuilder","type":"codeVoice"},{"type":"text","text":" can be attached to a "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"class"},{"text":". The only required method, ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","isActive":true},{"type":"text","text":", returns a tuple, which contains the URL, website title, description, and thumbnail image URL."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public protocol ATLinkBuilder {","    func grabMetadata(from link: URL) async throws -> (","        url: URL,","        title: String,","        description: String?,","        thumbnailURL: URL?","    )","}"]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"While "},{"code":"description","type":"codeVoice"},{"type":"text","text":" is optional, you still need a description for the embed."}]}]},{"anchor":"Grabbing-the-Websites-Metadata","text":"Grabbing the Website’s Metadata","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To get the metadata of the website, you’ll need to implement "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","isActive":true},{"type":"text","text":". There’s an argument where you pass the URL so it can do its work."}]},{"type":"paragraph","inlineContent":[{"text":"The way you implement it is up to you. You can:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use an external API from a server that does the work for you,"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use a Swift package that can parse website metadata, or"}]}]},{"content":[{"inlineContent":[{"text":"write the implementation yourself from scratch.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"For this example, we’ll use a mock server that does the compilation for us and gives us the information as a JSON object.","type":"text"}],"type":"paragraph"},{"code":["","public struct ExternalLinkBuilder: ATLinkBuilder {","    public func grabMetadata(from link: URL) async throws -> (url: URL, title: String, description: String?, thumbnailURL: URL?) {","        guard let serverURL = URL(string: \"https:\/\/linkBuilder.example.com\/api\/metadata?link=\\(link.absoluteString)\") else {","            throw ATLinkBuilderError.invalidURL(\"The URL, \\(link), is invalid.\")","        }","","        let (data, response) = try await URLSession.shared.data(from: serverURL)","","        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {","            throw ATLinkBuilderError.badServerResponse(string: \"Bad server response: \\(response)\")","        }","","        struct MetadataResponse: Decodable {","            let title: String","            let description: String?","            let thumbnailURL: URL?","        }","","        let decoder = JSONDecoder()","        let metadata = try decoder.decode(MetadataResponse.self, from: data)","","        return (url: link, title: metadata.title, description: metadata.description ?? \"No description given.\", thumbnailURL: metadata.thumbnailURL)","    }","}",""],"type":"codeListing","syntax":"swift"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"It’s important to throw errors if the URL is invalid or not found. Any additional errors can be unknown. See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError"},{"type":"text","text":" for the list of errors to throw."}],"type":"paragraph"}],"style":"note","type":"aside"},{"anchor":"Integration-into-ATProtoBluesky","text":"Integration into ATProtoBluesky","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Once you’ve completed creating the ","type":"text"},{"code":"ATLinkBuilder","type":"codeVoice"},{"text":"-conforming object, you can put this as an argument in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky"},{"type":"text","text":". The "},{"code":"class","type":"codeVoice"},{"text":" contains an argument named ","type":"text"},{"type":"codeVoice","code":"linkBuilder"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let config = ATProtocolConfiguration(","    handle: \"example.bsky.social\",","    appPassword: \"hunter2\"",")","","Task {","    do {","        \/\/ Create an instance of the conforming object...","        let externalEmbedBuilder = ExternalLinkBuilder()","","        let session = try await config.authenticate()","","        guard let link = URL(string: \"https:\/\/bsky.social\/about\/blog\/04-01-2024-bluesky-shorts\") else { return }","        let metadata = try await externalEmbedBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","","        let atProtoBluesky = ATProtoBluesky(","            atProtoKitInstance: atProto,","            linkbuilder: externalEmbedBuilder \/\/ ... and add the object in here.","        )","","    } catch {","        \/\/ Handle error...","    }","}"]},{"inlineContent":[{"text":"You can then create a post as normal using ","type":"text"},{"identifier":"``ATProtoBluesky\/createPostRecord(text:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)``","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The mthod will automatically take the first link it detects and use it as the external website card."}]},{"anchor":"Manually-Creating-a-Website-Card","type":"heading","level":2,"text":"Manually Creating a Website Card"},{"type":"paragraph","inlineContent":[{"text":"Optionally, you can also use the ","type":"text"},{"type":"codeVoice","code":"embed"},{"type":"text","text":" argument of "},{"type":"codeVoice","code":"createPostRecord()"},{"type":"text","text":". When doing so, you can use the "},{"type":"codeVoice","code":"ATLinkBuilder"},{"text":"-conforming object to grab the metadata and paste the result. This is useful for when you want to create a post that doesn’t doesn’t have the link copied over to the website card.","type":"text"}]},{"code":["Task {","    do {","        let session = try await config.authenticate()","","        let externalLinkBuilder = ExternalLinkBuilder()","","        guard let link = URL(string: \"https:\/\/www.nintendo.com\/\") else { return }","        let metadata = try await externalLinkBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","        let atProtoBluesky = ATProtoBluesky(atProtoKitInstance: atProto)","","        let postResult = try await atProtoBluesky.createPostRecord(","            text: \"Testing the link builder:\\n\\nhttps:\/\/www.apple.com\/\",","            embed: .external(","                url: metadata.url,","                title: metadata.title,","                description: metadata.description ?? \"No description given.\",","                thumbnailURL: metadata.thumbnailURL","            )","        )","","        print(\"Post Result: \\(postResult)\")","    } catch {","        throw error","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderProtocol"},"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"metadata":{"modules":[{"name":"ATProtoKit"}],"role":"article","roleHeading":"Article","title":"Creating Link Previews with ATLinkBuilder"},"kind":"article","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/atlinkbuilderprotocol"]}],"abstract":[{"text":"Grab metadata from URLs so you can attach them to a website card in a Bluesky post.","type":"text"}],"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky":{"url":"\/documentation\/atprotokit\/atprotobluesky","abstract":[{"type":"text","text":"The base class that handles all direct Bluesky-related functionality of the ATProtoKit"},{"type":"text","text":" "},{"type":"text","text":"API library."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ATProtoBluesky","kind":"identifier"}],"role":"symbol","title":"ATProtoBluesky","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","navigatorTitle":[{"text":"ATProtoBluesky","kind":"identifier"}],"type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit":{"abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"url":"\/documentation\/atprotokit","type":"topic","title":"ATProtoKit","kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"atprotokit_logo.png"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder/grabMetadata(from:)":{"abstract":[{"type":"text","text":"Fills the properties of the "},{"code":"struct","type":"codeVoice"},{"text":" conforming to ","type":"text"},{"type":"codeVoice","code":"ATLinkBuilder"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"grabMetadata"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> (url","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier","text":"URL"},{"kind":"text","text":", title"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", description"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":"?, thumbnailURL","kind":"text"},{"kind":"text","text":": "},{"text":"URL","preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"title":"grabMetadata(from:)","url":"\/documentation\/atprotokit\/atlinkbuilder\/grabmetadata(from:)","required":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","type":"topic"},"atprotokit_logo.png":{"variants":[{"url":"\/images\/atprotokit_logo.png","traits":["1x","light"]}],"identifier":"atprotokit_logo.png","alt":"A technology icon representing the ATProtoKit framework.","type":"image"},"``ATProtoBluesky/createPostRecord(text:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)``":{"type":"link","url":"``ATProtoBluesky\/createPostRecord(text:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)``","titleInlineContent":[{"code":"createPostRecord()","type":"codeVoice"}],"identifier":"``ATProtoBluesky\/createPostRecord(text:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)``","title":"createPostRecord()"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilderError":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ATLinkBuilderError","kind":"identifier"}],"url":"\/documentation\/atprotokit\/atlinkbuildererror","navigatorTitle":[{"kind":"identifier","text":"ATLinkBuilderError"}],"kind":"symbol","abstract":[{"type":"text","text":"An error type related to "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","isActive":true},{"text":"-related issues.","type":"text"}],"title":"ATLinkBuilderError","role":"symbol","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ATLinkBuilder"}],"url":"\/documentation\/atprotokit\/atlinkbuilder","navigatorTitle":[{"text":"ATLinkBuilder","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol used to easily access the metadata for a website."}],"title":"ATLinkBuilder","role":"symbol","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder"}}}