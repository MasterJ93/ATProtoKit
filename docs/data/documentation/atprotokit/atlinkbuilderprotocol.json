{"seeAlsoSections":[{"anchor":"Creating-Posts","title":"Creating Posts","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder"],"generated":true}],"abstract":[{"text":"Grab metadata from URLs so you can attach them to a website card in a Bluesky post.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderProtocol"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Creating Link Previews with ATLinkBuilder","modules":[{"name":"ATProtoKit"}],"role":"article","roleHeading":"Article"},"kind":"article","hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky"]]},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","isActive":true,"type":"reference"},{"text":" allows you to compile the link with the appropriate metadata to create an external link card in a Bluesky post. This is a ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":", so you can use how you want to perform this task.","type":"text"}]},{"level":3,"type":"heading","text":"Getting Started","anchor":"Getting-Started"},{"type":"paragraph","inlineContent":[{"code":"ATLinkBuilder","type":"codeVoice"},{"text":" can be attached to a ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"class","type":"codeVoice"},{"text":". The only required method, ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","type":"reference","isActive":true},{"text":", returns a tuple, which contains the URL, website title, description, and thumbnail image URL.","type":"text"}]},{"type":"codeListing","code":["public protocol ATLinkBuilder {","    func grabMetadata(from link: URL) async throws -> (","        url: URL,","        title: String,","        description: String?,","        thumbnailURL: URL?","    )","}"],"syntax":"swift"},{"content":[{"inlineContent":[{"text":"While ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" is optional, you still need a description for the embed.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"level":2,"type":"heading","text":"Grabbing the Website’s Metadata","anchor":"Grabbing-the-Websites-Metadata"},{"type":"paragraph","inlineContent":[{"text":"To get the metadata of the website, you’ll need to implement ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","isActive":true,"type":"reference"},{"text":". There’s an argument where you pass the URL so it can do its work.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The way you implement it is up to you. You can:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use an external API from a server that does the work for you,"}]}]},{"content":[{"inlineContent":[{"text":"use a Swift package that can parse website metadata, or","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"write the implementation yourself from scratch."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this example, we’ll use a mock server that does the compilation for us and gives us the information as a JSON object."}]},{"type":"codeListing","syntax":"swift","code":["","public struct ExternalLinkBuilder: ATLinkBuilder {","    public func grabMetadata(from link: URL) async throws -> (url: URL, title: String, description: String?, thumbnailURL: URL?) {","        guard let serverURL = URL(string: \"https:\/\/linkBuilder.example.com\/api\/metadata?link=\\(link.absoluteString)\") else {","            throw ATLinkBuilderError.invalidURL(\"The URL, \\(link), is invalid.\")","        }","","        let (data, response) = try await URLSession.shared.data(from: serverURL)","","        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {","            throw ATLinkBuilderError.badServerResponse(string: \"Bad server response: \\(response)\")","        }","","        struct MetadataResponse: Decodable {","            let title: String","            let description: String?","            let thumbnailURL: URL?","        }","","        let decoder = JSONDecoder()","        let metadata = try decoder.decode(MetadataResponse.self, from: data)","","        return (url: link, title: metadata.title, description: metadata.description ?? \"No description given.\", thumbnailURL: metadata.thumbnailURL)","    }","}",""]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s important to throw errors if the URL is invalid or not found. Any additional errors can be unknown. See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError"},{"type":"text","text":" for the list of errors to throw."}]}],"style":"note","name":"Note"},{"text":"Integration into ATProtoBluesky","type":"heading","anchor":"Integration-into-ATProtoBluesky","level":2},{"type":"paragraph","inlineContent":[{"text":"Once you’ve completed creating the ","type":"text"},{"code":"ATLinkBuilder","type":"codeVoice"},{"text":"-conforming object, you can put this as an argument in ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","isActive":true,"type":"reference"},{"text":". The ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" contains an argument named ","type":"text"},{"code":"linkBuilder","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let config = ATProtocolConfiguration(","    handle: \"example.bsky.social\",","    appPassword: \"hunter2\"",")","","Task {","    do {","        \/\/ Create an instance of the conforming object...","        let externalEmbedBuilder = ExternalLinkBuilder()","","        let session = try await config.authenticate()","","        guard let link = URL(string: \"https:\/\/bsky.social\/about\/blog\/04-01-2024-bluesky-shorts\") else { return }","        let metadata = try await externalEmbedBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","","        let atProtoBluesky = ATProtoBluesky(","            atProtoKitInstance: atProto,","            linkbuilder: externalEmbedBuilder \/\/ ... and add the object in here.","        )","","    } catch {","        \/\/ Handle error...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can then create a post as normal using "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The method will automatically take the first link it detects and use it as the external website card."}]},{"text":"Manually Creating a Website Card","type":"heading","anchor":"Manually-Creating-a-Website-Card","level":2},{"type":"paragraph","inlineContent":[{"text":"Optionally, you can also use the ","type":"text"},{"code":"embed","type":"codeVoice"},{"text":" argument of ","type":"text"},{"code":"createPostRecord()","type":"codeVoice"},{"text":". When doing so, you can use the ","type":"text"},{"code":"ATLinkBuilder","type":"codeVoice"},{"text":"-conforming object to grab the metadata and paste the result. This is useful for when you want to create a post that doesn’t doesn’t have the link copied over to the website card.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Task {","    do {","        let session = try await config.authenticate()","","        let externalLinkBuilder = ExternalLinkBuilder()","","        guard let link = URL(string: \"https:\/\/www.nintendo.com\/\") else { return }","        let metadata = try await externalLinkBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","        let atProtoBluesky = ATProtoBluesky(atProtoKitInstance: atProto)","","        let postResult = try await atProtoBluesky.createPostRecord(","            text: \"Testing the link builder:\\n\\nhttps:\/\/www.apple.com\/\",","            embed: .external(","                url: metadata.url,","                title: metadata.title,","                description: metadata.description ?? \"No description given.\",","                thumbnailURL: metadata.thumbnailURL","            )","        )","","        print(\"Post Result: \\(postResult)\")","    } catch {","        throw error","    }","}"]}]}],"variants":[{"paths":["\/documentation\/atprotokit\/atlinkbuilderprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)":{"kind":"symbol","abstract":[{"text":"A convenience method to create a post record to the user account in Bluesky.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"createPostRecord"},{"kind":"text","text":"("},{"kind":"externalParam","text":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"inlineFacets"},{"kind":"text","text":": [(url"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"kind":"text","text":", startPosition"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", endPosition"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")]?, "},{"kind":"externalParam","text":"locales"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation6LocaleV","text":"Locale"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"replyTo"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconO","text":"AppBskyLexicon"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconO4FeedO","text":"Feed"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconO4FeedO10PostRecordV","text":"PostRecord"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconO4FeedO10PostRecordV14ReplyReferenceV","text":"ReplyReference"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"embed"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC","text":"ATProtoBluesky"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC15EmbedIdentifierO","text":"EmbedIdentifier"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"labels"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO","text":"ComAtprotoLexicon"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO5LabelO","text":"Label"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO5LabelO20SelfLabelsDefinitionV","text":"SelfLabelsDefinition"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"tags"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"]?, "},{"kind":"externalParam","text":"creationDate"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV","text":"Date"},{"kind":"text","text":", "},{"kind":"externalParam","text":"recordKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"shouldValidate"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"swapCommit"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO","text":"ComAtprotoLexicon"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO10RepositoryO","text":"Repository"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconO10RepositoryO15StrongReferenceV","text":"StrongReference"}],"title":"createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","url":"\/documentation\/atprotokit\/atprotobluesky\/createpostrecord(text:inlinefacets:locales:replyto:embed:labels:tags:creationdate:recordkey:shouldvalidate:swapcommit:)","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","type":"topic"},"atprotokit_icon.png":{"identifier":"atprotokit_icon.png","alt":"A technology icon representing the ATProtoKit framework.","variants":[{"traits":["1x","light"],"url":"\/images\/ATProtoKit\/atprotokit_icon.png"}],"type":"image"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilderError":{"title":"ATLinkBuilderError","abstract":[{"type":"text","text":"An error type related to "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","isActive":true},{"type":"text","text":"-related issues."}],"kind":"symbol","url":"\/documentation\/atprotokit\/atlinkbuildererror","role":"symbol","type":"topic","navigatorTitle":[{"text":"ATLinkBuilderError","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ATLinkBuilderError","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder/grabMetadata(from:)":{"role":"symbol","url":"\/documentation\/atprotokit\/atlinkbuilder\/grabmetadata(from:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"grabMetadata"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> (url"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"kind":"text","text":", title"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", description"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?, thumbnailURL"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"kind":"text","text":"?)"}],"title":"grabMetadata(from:)","kind":"symbol","abstract":[{"type":"text","text":"Fills the properties of the "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" conforming to "},{"type":"codeVoice","code":"ATLinkBuilder"},{"type":"text","text":"."}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","type":"topic","required":true},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ATProtoBluesky"}],"navigatorTitle":[{"kind":"identifier","text":"ATProtoBluesky"}],"abstract":[{"text":"The base class that handles all direct Bluesky-related functionality of the ATProtoKit","type":"text"},{"text":" ","type":"text"},{"text":"API library.","type":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","title":"ATProtoBluesky","kind":"symbol","url":"\/documentation\/atprotokit\/atprotobluesky","type":"topic","role":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder":{"title":"ATLinkBuilder","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","type":"topic","kind":"symbol","abstract":[{"text":"A protocol used to easily access the metadata for a website.","type":"text"}],"url":"\/documentation\/atprotokit\/atlinkbuilder","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ATLinkBuilder","kind":"identifier"}],"navigatorTitle":[{"text":"ATLinkBuilder","kind":"identifier"}]},"doc://ATProtoKit/documentation/ATProtoKit":{"type":"topic","kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","images":[{"identifier":"atprotokit_icon.png","type":"icon"}],"abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"url":"\/documentation\/atprotokit","title":"ATProtoKit","role":"collection"}}}