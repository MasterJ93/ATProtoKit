{"sections":[],"abstract":[{"text":"Grab metadata from URLs so you can attach them to a website card in a Bluesky post.","type":"text"}],"variants":[{"paths":["\/documentation\/atprotokit\/atlinkbuilderprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderProtocol","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"title":"Managing Posts","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/deletePostRecord(_:)"]}],"kind":"article","metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"ATProtoKit"}],"title":"Creating Link Previews with ATLinkBuilder"},"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder"},{"text":" allows you to compile the link with the appropriate metadata to create an external link card in a Bluesky post. This is a ","type":"text"},{"code":"protocol","type":"codeVoice"},{"type":"text","text":", so you can use how you want to perform this task."}],"type":"paragraph"},{"text":"Getting Started","anchor":"Getting-Started","type":"heading","level":3},{"inlineContent":[{"code":"ATLinkBuilder","type":"codeVoice"},{"text":" can be attached to a ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":" or "},{"type":"codeVoice","code":"class"},{"text":". The only required method, ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)"},{"type":"text","text":", returns a tuple, which contains the URL, website title, description, and thumbnail image URL."}],"type":"paragraph"},{"code":["public protocol ATLinkBuilder {","    func grabMetadata(from link: URL) async throws -> (","        url: URL,","        title: String,","        description: String?,","        thumbnailURL: URL?","    )","}"],"syntax":"swift","type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"While "},{"code":"description","type":"codeVoice"},{"type":"text","text":" is optional, you still need a description for the embed."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"anchor":"Grabbing-the-Websites-Metadata","type":"heading","text":"Grabbing the Website’s Metadata","level":2},{"inlineContent":[{"type":"text","text":"To get the metadata of the website, you’ll need to implement "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","type":"reference","isActive":true},{"type":"text","text":". There’s an argument where you pass the URL so it can do its work."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The way you implement it is up to you. You can:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use an external API from a server that does the work for you,"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"use a Swift package that can parse website metadata, or"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"write the implementation yourself from scratch."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this example, we’ll use a mock server that does the compilation for us and gives us the information as a JSON object."}]},{"syntax":"swift","type":"codeListing","code":["","public struct ExternalLinkBuilder: ATLinkBuilder {","    public func grabMetadata(from link: URL) async throws -> (url: URL, title: String, description: String?, thumbnailURL: URL?) {","        guard let serverURL = URL(string: \"https:\/\/linkBuilder.example.com\/api\/metadata?link=\\(link.absoluteString)\") else {","            throw ATLinkBuilderError.invalidURL(\"The URL, \\(link), is invalid.\")","        }","","        let (data, response) = try await URLSession.shared.data(from: serverURL)","","        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {","            throw ATLinkBuilderError.badServerResponse(string: \"Bad server response: \\(response)\")","        }","","        struct MetadataResponse: Decodable {","            let title: String","            let description: String?","            let thumbnailURL: URL?","        }","","        let decoder = JSONDecoder()","        let metadata = try decoder.decode(MetadataResponse.self, from: data)","","        return (url: link, title: metadata.title, description: metadata.description ?? \"No description given.\", thumbnailURL: metadata.thumbnailURL)","    }","}",""]},{"content":[{"type":"paragraph","inlineContent":[{"text":"It’s important to throw errors if the URL is invalid or not found. Any additional errors can be unknown. See ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError","isActive":true},{"text":" for the list of errors to throw.","type":"text"}]}],"style":"note","name":"Note","type":"aside"},{"anchor":"Integration-into-ATProtoBluesky","text":"Integration into ATProtoBluesky","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Once you’ve completed creating the ","type":"text"},{"type":"codeVoice","code":"ATLinkBuilder"},{"type":"text","text":"-conforming object, you can put this as an argument in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky"},{"text":". The ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" contains an argument named ","type":"text"},{"code":"linkBuilder","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let config = ATProtocolConfiguration(","    handle: \"example.bsky.social\",","    appPassword: \"hunter2\"",")","","Task {","    do {","        \/\/ Create an instance of the conforming object...","        let externalEmbedBuilder = ExternalLinkBuilder()","","        let session = try await config.authenticate()","","        guard let link = URL(string: \"https:\/\/bsky.social\/about\/blog\/04-01-2024-bluesky-shorts\") else { return }","        let metadata = try await externalEmbedBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","","        let atProtoBluesky = ATProtoBluesky(","            atProtoKitInstance: atProto,","            linkbuilder: externalEmbedBuilder \/\/ ... and add the object in here.","        )","","    } catch {","        \/\/ Handle error...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can then create a post as normal using "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The method will automatically take the first link it detects and use it as the external website card.","type":"text"}],"type":"paragraph"},{"text":"Manually Creating a Website Card","level":2,"anchor":"Manually-Creating-a-Website-Card","type":"heading"},{"inlineContent":[{"type":"text","text":"Optionally, you can also use the "},{"code":"embed","type":"codeVoice"},{"text":" argument of ","type":"text"},{"type":"codeVoice","code":"createPostRecord()"},{"text":". When doing so, you can use the ","type":"text"},{"type":"codeVoice","code":"ATLinkBuilder"},{"type":"text","text":"-conforming object to grab the metadata and paste the result. This is useful for when you want to create a post that doesn’t doesn’t have the link copied over to the website card."}],"type":"paragraph"},{"code":["Task {","    do {","        let session = try await config.authenticate()","","        let externalLinkBuilder = ExternalLinkBuilder()","","        guard let link = URL(string: \"https:\/\/www.nintendo.com\/\") else { return }","        let metadata = try await externalLinkBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","        let atProtoBluesky = ATProtoBluesky(atProtoKitInstance: atProto)","","        let postResult = try await atProtoBluesky.createPostRecord(","            text: \"Testing the link builder:\\n\\nhttps:\/\/www.apple.com\/\",","            embed: .external(","                url: metadata.url,","                title: metadata.title,","                description: metadata.description ?? \"No description given.\",","                thumbnailURL: metadata.thumbnailURL","            )","        )","","        print(\"Post Result: \\(postResult)\")","    } catch {","        throw error","    }","}"],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky/deletePostRecord(_:)":{"title":"deletePostRecord(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"deletePostRecord","kind":"identifier"},{"kind":"text","text":"("},{"text":"ATProtoBluesky","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:10ATProtoKit0A7BlueskyC16RecordIdentifierO","kind":"typeIdentifier","text":"RecordIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic","role":"symbol","url":"\/documentation\/atprotokit\/atprotobluesky\/deletepostrecord(_:)","abstract":[{"type":"text","text":"Deletes a post record."}],"kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/deletePostRecord(_:)"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilderError":{"title":"ATLinkBuilderError","url":"\/documentation\/atprotokit\/atlinkbuildererror","role":"symbol","abstract":[{"type":"text","text":"An error type related to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder"},{"type":"text","text":"-related issues."}],"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"ATLinkBuilderError","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"ATLinkBuilderError","kind":"identifier"}]},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder/grabMetadata(from:)":{"url":"\/documentation\/atprotokit\/atlinkbuilder\/grabmetadata(from:)","abstract":[{"text":"Fills the properties of the ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":" conforming to "},{"code":"ATLinkBuilder","type":"codeVoice"},{"type":"text","text":"."}],"title":"grabMetadata(from:)","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"grabMetadata"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> (url"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation3URLV","text":"URL","kind":"typeIdentifier"},{"text":", title","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":", description","kind":"text"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"?, thumbnailURL"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10Foundation3URLV","text":"URL","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","type":"topic","role":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky":{"title":"ATProtoBluesky","url":"\/documentation\/atprotokit\/atprotobluesky","role":"symbol","abstract":[{"type":"text","text":"The base class that handles all direct Bluesky-related functionality of the ATProtoKit"},{"text":" ","type":"text"},{"text":"API library.","type":"text"}],"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATProtoBluesky"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ATProtoBluesky"}]},"doc://ATProtoKit/documentation/ATProtoKit":{"role":"collection","url":"\/documentation\/atprotokit","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","kind":"symbol","abstract":[{"text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky.","type":"text"}],"title":"ATProtoKit","images":[{"identifier":"atprotokit_logo.png","type":"icon"}],"type":"topic"},"atprotokit_logo.png":{"alt":"A technology icon representing the ATProtoKit framework.","type":"image","identifier":"atprotokit_logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/atprotokit_logo.png"}]},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)":{"title":"createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"createPostRecord","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"text"},{"kind":"text","text":": "},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"inlineFacets","kind":"externalParam"},{"kind":"text","text":": [(url"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"text":", startPosition","kind":"text"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", endPosition"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":")]?, "},{"text":"locales","kind":"externalParam"},{"kind":"text","text":": ["},{"text":"Locale","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation6LocaleV"},{"text":"], ","kind":"text"},{"text":"replyTo","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV","text":"AppBskyLexicon","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV","kind":"typeIdentifier","text":"Feed"},{"text":".","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV10PostRecordV","kind":"typeIdentifier","text":"PostRecord"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV10PostRecordV14ReplyReferenceV","text":"ReplyReference"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"embed"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC","text":"ATProtoBluesky"},{"kind":"text","text":"."},{"text":"EmbedIdentifier","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC15EmbedIdentifierO"},{"kind":"text","text":"?, "},{"text":"labels","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ATUnion","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit7ATUnionV"},{"text":".","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit7ATUnionV19PostSelfLabelsUnionO","text":"PostSelfLabelsUnion","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"tags"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":"]?, ","kind":"text"},{"text":"creationDate","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV","text":"Date"},{"text":", ","kind":"text"},{"text":"recordKey","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?, "},{"text":"shouldValidate","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"swapCommit"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"ComAtprotoLexicon","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV10RepositoryV","text":"Repository"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"StrongReference","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV10RepositoryV15StrongReferenceV"}],"type":"topic","role":"symbol","url":"\/documentation\/atprotokit\/atprotobluesky\/createpostrecord(text:inlinefacets:locales:replyto:embed:labels:tags:creationdate:recordkey:shouldvalidate:swapcommit:)","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","kind":"symbol","abstract":[{"text":"A convenience method to create a post record to user account in Bluesky.","type":"text"}]},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder":{"title":"ATLinkBuilder","url":"\/documentation\/atprotokit\/atlinkbuilder","role":"symbol","abstract":[{"type":"text","text":"A protocol used to easily access the metadata for a website."}],"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATLinkBuilder"}],"kind":"symbol","navigatorTitle":[{"text":"ATLinkBuilder","kind":"identifier"}]}}}