{"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","type":"reference"},{"text":" allows you to compile the link with the appropriate metadata to create an external link card in a Bluesky post. This is a ","type":"text"},{"code":"protocol","type":"codeVoice"},{"type":"text","text":", so you can use how you want to perform this task."}]},{"type":"heading","anchor":"Getting-Started","text":"Getting Started","level":3},{"type":"paragraph","inlineContent":[{"code":"ATLinkBuilder","type":"codeVoice"},{"type":"text","text":" can be attached to a "},{"type":"codeVoice","code":"struct"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"class"},{"text":". The only required method, ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","isActive":true},{"type":"text","text":", returns a tuple, which contains the URL, website title, description, and thumbnail image URL."}]},{"type":"codeListing","syntax":"swift","code":["public protocol ATLinkBuilder {","    func grabMetadata(from link: URL) async throws -> (","        url: URL,","        title: String,","        description: String?,","        thumbnailURL: URL?","    )","}"]},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"While "},{"type":"codeVoice","code":"description"},{"type":"text","text":" is optional, you still need a description for the embed."}],"type":"paragraph"}]},{"level":2,"anchor":"Grabbing-the-Websites-Metadata","text":"Grabbing the Website’s Metadata","type":"heading"},{"inlineContent":[{"type":"text","text":"To get the metadata of the website, you’ll need to implement "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","type":"reference","isActive":true},{"type":"text","text":". There’s an argument where you pass the URL so it can do its work."}],"type":"paragraph"},{"inlineContent":[{"text":"The way you implement it is up to you. You can:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"use an external API from a server that does the work for you,","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use a Swift package that can parse website metadata, or"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"write the implementation yourself from scratch.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this example, we’ll use a mock server that does the compilation for us and gives us the information as a JSON object."}]},{"code":["","public struct ExternalLinkBuilder: ATLinkBuilder {","    public func grabMetadata(from link: URL) async throws -> (url: URL, title: String, description: String?, thumbnailURL: URL?) {","        guard let serverURL = URL(string: \"https:\/\/linkBuilder.example.com\/api\/metadata?link=\\(link.absoluteString)\") else {","            throw ATLinkBuilderError.invalidURL(\"The URL, \\(link), is invalid.\")","        }","","        let (data, response) = try await URLSession.shared.data(from: serverURL)","","        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {","            throw ATLinkBuilderError.badServerResponse(string: \"Bad server response: \\(response)\")","        }","","        struct MetadataResponse: Decodable {","            let title: String","            let description: String?","            let thumbnailURL: URL?","        }","","        let decoder = JSONDecoder()","        let metadata = try decoder.decode(MetadataResponse.self, from: data)","","        return (url: link, title: metadata.title, description: metadata.description ?? \"No description given.\", thumbnailURL: metadata.thumbnailURL)","    }","}",""],"syntax":"swift","type":"codeListing"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s important to throw errors if the URL is invalid or not found. Any additional errors can be unknown. See "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError","isActive":true,"type":"reference"},{"type":"text","text":" for the list of errors to throw."}]}],"style":"note","name":"Note"},{"type":"heading","level":2,"anchor":"Integration-into-ATProtoBluesky","text":"Integration into ATProtoBluesky"},{"inlineContent":[{"type":"text","text":"Once you’ve completed creating the "},{"code":"ATLinkBuilder","type":"codeVoice"},{"type":"text","text":"-conforming object, you can put this as an argument in "},{"isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","type":"reference"},{"type":"text","text":". The "},{"type":"codeVoice","code":"class"},{"type":"text","text":" contains an argument named "},{"code":"linkBuilder","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["let config = ATProtocolConfiguration(","    handle: \"example.bsky.social\",","    appPassword: \"hunter2\"",")","","Task {","    do {","        \/\/ Create an instance of the conforming object...","        let externalEmbedBuilder = ExternalLinkBuilder()","","        let session = try await config.authenticate()","","        guard let link = URL(string: \"https:\/\/bsky.social\/about\/blog\/04-01-2024-bluesky-shorts\") else { return }","        let metadata = try await externalEmbedBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","","        let atProtoBluesky = ATProtoBluesky(","            atProtoKitInstance: atProto,","            linkbuilder: externalEmbedBuilder \/\/ ... and add the object in here.","        )","","    } catch {","        \/\/ Handle error...","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can then create a post as normal using "},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The method will automatically take the first link it detects and use it as the external website card."}]},{"anchor":"Manually-Creating-a-Website-Card","type":"heading","level":2,"text":"Manually Creating a Website Card"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optionally, you can also use the "},{"code":"embed","type":"codeVoice"},{"type":"text","text":" argument of "},{"code":"createPostRecord()","type":"codeVoice"},{"text":". When doing so, you can use the ","type":"text"},{"code":"ATLinkBuilder","type":"codeVoice"},{"type":"text","text":"-conforming object to grab the metadata and paste the result. This is useful for when you want to create a post that doesn’t doesn’t have the link copied over to the website card."}]},{"code":["Task {","    do {","        let session = try await config.authenticate()","","        let externalLinkBuilder = ExternalLinkBuilder()","","        guard let link = URL(string: \"https:\/\/www.nintendo.com\/\") else { return }","        let metadata = try await externalLinkBuilder.grabMetadata(from: link)","","        let atProto = ATProtoKit(session: session)","        let atProtoBluesky = ATProtoBluesky(atProtoKitInstance: atProto)","","        let postResult = try await atProtoBluesky.createPostRecord(","            text: \"Testing the link builder:\\n\\nhttps:\/\/www.apple.com\/\",","            embed: .external(","                url: metadata.url,","                title: metadata.title,","                description: metadata.description ?? \"No description given.\",","                thumbnailURL: metadata.thumbnailURL","            )","        )","","        print(\"Post Result: \\(postResult)\")","    } catch {","        throw error","    }","}"],"type":"codeListing","syntax":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderProtocol"},"seeAlsoSections":[{"generated":true,"title":"Managing Posts","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/deletePostRecord(_:)"]}],"variants":[{"paths":["\/documentation\/atprotokit\/atlinkbuilderprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"article","metadata":{"modules":[{"name":"ATProtoKit"}],"role":"article","title":"Creating Link Previews with ATLinkBuilder","roleHeading":"Article"},"abstract":[{"text":"Grab metadata from URLs so you can attach them to a website card in a Bluesky post.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky"]]},"references":{"doc://ATProtoKit/documentation/ATProtoKit":{"abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"type":"topic","title":"ATProtoKit","url":"\/documentation\/atprotokit","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","role":"collection","images":[{"type":"icon","identifier":"atprotokit_icon.png"}],"kind":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"createPostRecord","kind":"identifier"},{"text":"(","kind":"text"},{"text":"text","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"inlineFacets"},{"text":": [(url","kind":"text"},{"text":": ","kind":"text"},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"kind":"text","text":", startPosition"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", endPosition"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")]?, ","kind":"text"},{"kind":"externalParam","text":"locales"},{"text":": [","kind":"text"},{"text":"Locale","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation6LocaleV"},{"text":"], ","kind":"text"},{"kind":"externalParam","text":"replyTo"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AppBskyLexicon","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV","text":"Feed"},{"text":".","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV10PostRecordV","text":"PostRecord","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"ReplyReference","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit14AppBskyLexiconV4FeedV10PostRecordV14ReplyReferenceV"},{"text":"?, ","kind":"text"},{"text":"embed","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10ATProtoKit0A7BlueskyC","text":"ATProtoBluesky","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:10ATProtoKit0A7BlueskyC15EmbedIdentifierO","text":"EmbedIdentifier","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"labels","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit7ATUnionV","kind":"typeIdentifier","text":"ATUnion"},{"text":".","kind":"text"},{"preciseIdentifier":"s:10ATProtoKit7ATUnionV19PostSelfLabelsUnionO","text":"PostSelfLabelsUnion","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"tags"},{"text":": [","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?, "},{"kind":"externalParam","text":"creationDate"},{"text":": ","kind":"text"},{"text":"Date","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV"},{"kind":"text","text":", "},{"text":"recordKey","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"shouldValidate"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"swapCommit"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"ComAtprotoLexicon","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV10RepositoryV","text":"Repository"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StrongReference","preciseIdentifier":"s:10ATProtoKit17ComAtprotoLexiconV10RepositoryV15StrongReferenceV"}],"role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","title":"createPostRecord(text:inlineFacets:locales:replyTo:embed:labels:tags:creationDate:recordKey:shouldValidate:swapCommit:)","kind":"symbol","url":"\/documentation\/atprotokit\/atprotobluesky\/createpostrecord(text:inlinefacets:locales:replyto:embed:labels:tags:creationdate:recordkey:shouldvalidate:swapcommit:)","type":"topic","abstract":[{"type":"text","text":"A convenience method to create a post record to the user account in Bluesky."}]},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilderError":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ATLinkBuilderError"}],"url":"\/documentation\/atprotokit\/atlinkbuildererror","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATLinkBuilderError"}],"title":"ATLinkBuilderError","type":"topic","abstract":[{"text":"An error type related to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder"},{"type":"text","text":"-related issues."}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilderError"},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATProtoBluesky"}],"role":"symbol","navigatorTitle":[{"text":"ATProtoBluesky","kind":"identifier"}],"title":"ATProtoBluesky","abstract":[{"text":"The base class that handles all direct Bluesky-related functionality of the ATProtoKit","type":"text"},{"text":" ","type":"text"},{"text":"API library.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky","url":"\/documentation\/atprotokit\/atprotobluesky"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder":{"kind":"symbol","navigatorTitle":[{"text":"ATLinkBuilder","kind":"identifier"}],"url":"\/documentation\/atprotokit\/atlinkbuilder","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ATLinkBuilder"}],"title":"ATLinkBuilder","type":"topic","abstract":[{"type":"text","text":"A protocol used to easily access the metadata for a website."}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder"},"doc://ATProtoKit/documentation/ATProtoKit/ATLinkBuilder/grabMetadata(from:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"grabMetadata"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> (url","kind":"text"},{"kind":"text","text":": "},{"text":"URL","preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier"},{"text":", title","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", description"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?, thumbnailURL"},{"text":": ","kind":"text"},{"text":"URL","preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier"},{"kind":"text","text":"?)"}],"role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATLinkBuilder\/grabMetadata(from:)","title":"grabMetadata(from:)","url":"\/documentation\/atprotokit\/atlinkbuilder\/grabmetadata(from:)","kind":"symbol","type":"topic","required":true,"abstract":[{"type":"text","text":"Fills the properties of the "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" conforming to "},{"code":"ATLinkBuilder","type":"codeVoice"},{"text":".","type":"text"}]},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoBluesky/deletePostRecord(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"deletePostRecord"},{"kind":"text","text":"("},{"preciseIdentifier":"s:10ATProtoKit0A7BlueskyC","text":"ATProtoBluesky","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"RecordIdentifier","kind":"typeIdentifier","preciseIdentifier":"s:10ATProtoKit0A7BlueskyC16RecordIdentifierO"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoBluesky\/deletePostRecord(_:)","title":"deletePostRecord(_:)","kind":"symbol","url":"\/documentation\/atprotokit\/atprotobluesky\/deletepostrecord(_:)","type":"topic","abstract":[{"type":"text","text":"Deletes a post record."}]},"atprotokit_icon.png":{"alt":"A technology icon representing the ATProtoKit framework.","identifier":"atprotokit_icon.png","type":"image","variants":[{"url":"\/images\/atprotokit_icon.png","traits":["1x","light"]}]}}}