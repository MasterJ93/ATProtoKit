{"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream\/ATEventStreamConfiguration-Implementations"]]},"variants":[{"paths":["\/documentation\/atprotokit\/atfirehosestream\/connect(cursor:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Connects the client to the event stream."}],"kind":"symbol","sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"cursor"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"kind":"text","text":"? = nil) "},{"kind":"keyword","text":"async"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The mark used to indicate the starting point for the next set of results. Optional."}],"type":"paragraph"}],"name":"cursor"}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Normally, when connecting to the event stream, it will start from the first message the event stream gets. The client will always look at the last successful","type":"text"},{"type":"text","text":" "},{"code":"sequencePosition","type":"codeVoice"},{"type":"text","text":" and stores it internally. However, the following can occur when "},{"code":"cursor","type":"codeVoice"},{"text":" is invloved:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If "},{"code":"cursor","type":"codeVoice"},{"text":" is higher than ","type":"text"},{"type":"codeVoice","code":"sequencePosition"},{"text":", the connection will close after outputting an error.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"cursor"},{"text":"is within the server’s rollback window, the server will attempt to give the client all of the messages it might have missed.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"cursor","type":"codeVoice"},{"type":"text","text":" is outside of the rollback window, then the server will send an info message saying it’s too old, then sends the oldest message it has and"},{"text":" ","type":"text"},{"type":"text","text":"continues the stream."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"cursor"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"text":", then the server will send the oldest message it has and continues the stream.","type":"text"}],"type":"paragraph"}]}]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"externalID":"s:10ATProtoKit26ATEventStreamConfigurationPAAE7connect6cursorys5Int64VSg_tYaF::SYNTHESIZED::s:10ATProtoKit16ATFirehoseStreamC","extendedModule":"ATProtoKit","roleHeading":"Instance Method","remoteSource":{"url":"https:\/\/github.com\/MasterJ93\/ATProtoKit\/tree\/main\/Sources\/ATProtoKit\/APIReference\/ATEventStreamConfiguration\/ATEventStreamConfigurationExtension.swift#L27","fileName":"ATEventStreamConfigurationExtension.swift"},"modules":[{"name":"ATProtoKit"}],"role":"symbol","title":"connect(cursor:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"kind":"text","text":"("},{"text":"cursor","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"}],"symbolKind":"method"},"identifier":{"url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream\/connect(cursor:)","interfaceLanguage":"swift"},"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATFirehoseStream/connect(cursor:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"cursor"},{"text":": ","kind":"text"},{"text":"Int64","preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"}],"abstract":[{"type":"text","text":"Connects the client to the event stream."}],"url":"\/documentation\/atprotokit\/atfirehosestream\/connect(cursor:)","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream\/connect(cursor:)","title":"connect(cursor:)","type":"topic","role":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/ATFirehoseStream":{"navigatorTitle":[{"text":"ATFirehoseStream","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream","title":"ATFirehoseStream","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ATFirehoseStream","kind":"identifier"}],"url":"\/documentation\/atprotokit\/atfirehosestream","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"The base class for Bluesky’s Firehose event stream."}],"type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit/ATFirehoseStream/ATEventStreamConfiguration-Implementations":{"abstract":[],"kind":"article","url":"\/documentation\/atprotokit\/atfirehosestream\/ateventstreamconfiguration-implementations","type":"topic","role":"collectionGroup","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream\/ATEventStreamConfiguration-Implementations","title":"ATEventStreamConfiguration Implementations"},"doc://ATProtoKit/documentation/ATProtoKit":{"kind":"symbol","url":"\/documentation\/atprotokit","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","role":"collection","images":[{"identifier":"atprotokit_icon.png","type":"icon"}],"abstract":[{"text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky.","type":"text"}],"title":"ATProtoKit"},"atprotokit_icon.png":{"alt":"A technology icon representing the ATProtoKit framework.","identifier":"atprotokit_icon.png","variants":[{"url":"\/images\/atprotokit_icon.png","traits":["1x","light"]}],"type":"image"}}}