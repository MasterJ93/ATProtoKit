{"identifier":{"url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedDecodingContainer\/decodeDate(forKey:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/atprotokit\/swift\/keyeddecodingcontainer\/decodedate(forkey:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"s:s22KeyedDecodingContainerV10ATProtoKitE10decodeDate6forKey10Foundation0G0Vx_tKF","extendedModule":"Swift","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decodeDate","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"forKey"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s22KeyedDecodingContainerV","kind":"typeIdentifier","text":"KeyedDecodingContainer"},{"kind":"text","text":"<"},{"text":"K","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Key","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Date","preciseIdentifier":"s:10Foundation4DateV","kind":"typeIdentifier"}],"modules":[{"name":"ATProtoKit","relatedModules":["Swift"]}],"role":"symbol","symbolKind":"method","conformance":{"constraints":[{"code":"K","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"decodeDate(forKey:)","roleHeading":"Instance Method","remoteSource":{"url":"https:\/\/github.com\/MasterJ93\/ATProtoKit\/tree\/main\/Sources\/ATProtoKit\/Utilities\/Extensions\/DateFormatting.swift#L71","fileName":"DateFormatting.swift"}},"sections":[],"abstract":[{"type":"text","text":"Decodes a non-optional date string using the provided "},{"code":"CustomDateFormatter","type":"codeVoice"},{"type":"text","text":"."}],"seeAlsoSections":[{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedDecodingContainer\/decodeDateIfPresent(forKey:)"],"title":"Decodable Methods","generated":true}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"decodeDate"},{"kind":"text","text":"("},{"kind":"externalParam","text":"forKey"},{"text":" ","kind":"text"},{"text":"key","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyedDecodingContainer","preciseIdentifier":"s:s22KeyedDecodingContainerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"K"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Key"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Date","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The key associated with the date string.","type":"text"}]}],"name":"key"}],"kind":"parameters"},{"content":[{"level":2,"anchor":"return-value","text":"Return Value","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"Date","type":"codeVoice"},{"text":" object if decoding is successful.","type":"text"}]}],"kind":"content"},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This is used as a replacement of ","type":"text"},{"code":"decode(_:forKey:)","type":"codeVoice"},{"text":" specifically for ","type":"text"},{"type":"codeVoice","code":"Date"},{"type":"text","text":" objects."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"DecodingError","type":"codeVoice"},{"text":" if the key is missing or the value is invalid.","type":"text"}]}],"style":"note","type":"aside","name":"Throws"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting-PropertyWrapper"]]},"kind":"symbol","references":{"doc://ATProtoKit/documentation/ATProtoKit":{"images":[{"identifier":"atprotokit_icon.png","type":"icon"}],"type":"topic","url":"\/documentation\/atprotokit","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"title":"ATProtoKit","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit"},"doc://ATProtoKit/documentation/ATProtoKit/Swift/KeyedDecodingContainer/decodeDate(forKey:)":{"title":"decodeDate(forKey:)","kind":"symbol","role":"symbol","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"K"},{"type":"text","text":" conforms to "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"Decodes a non-optional date string using the provided "},{"code":"CustomDateFormatter","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/atprotokit\/swift\/keyeddecodingcontainer\/decodedate(forkey:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decodeDate","kind":"identifier"},{"text":"(","kind":"text"},{"text":"forKey","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s22KeyedDecodingContainerV","text":"KeyedDecodingContainer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"K"},{"kind":"text","text":">."},{"text":"Key","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Date","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedDecodingContainer\/decodeDate(forKey:)"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormatting-PropertyWrapper":{"abstract":[{"text":"Convert dates to and from the ISO8601 format.","type":"text"}],"type":"topic","title":"Custom Date Encoding and Decoding","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting-PropertyWrapper","role":"collectionGroup","url":"\/documentation\/atprotokit\/dateformatting-propertywrapper","kind":"article"},"atprotokit_icon.png":{"alt":"A technology icon representing the ATProtoKit framework.","type":"image","identifier":"atprotokit_icon.png","variants":[{"url":"\/images\/atprotokit_icon.png","traits":["1x","light"]}]},"doc://ATProtoKit/documentation/ATProtoKit/Swift/KeyedDecodingContainer/decodeDateIfPresent(forKey:)":{"title":"decodeDateIfPresent(forKey:)","kind":"symbol","role":"symbol","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"K","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"Converts an ISO8601-formatted date string (if it exists) and converts it to a "},{"type":"codeVoice","code":"Date?"},{"text":" object.","type":"text"}],"url":"\/documentation\/atprotokit\/swift\/keyeddecodingcontainer\/decodedateifpresent(forkey:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"decodeDateIfPresent","kind":"identifier"},{"kind":"text","text":"("},{"text":"forKey","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"KeyedDecodingContainer","kind":"typeIdentifier","preciseIdentifier":"s:s22KeyedDecodingContainerV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"K"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Key"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Date","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedDecodingContainer\/decodeDateIfPresent(forKey:)"}}}