{"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@propertyWrapper","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DateFormattingOptional","kind":"identifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When using "},{"type":"codeVoice","code":"@DateFormattingOptional"},{"type":"text","text":", you first need to add it to a "},{"code":"Date?","type":"codeVoice"},{"text":" property:","type":"text"}]},{"type":"codeListing","code":["@DateFormattingOptional public var indexedAt: Date?"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"init()"},{"type":"text","text":", instead of initializing the property the standard way, you need to set the value"},{"type":"text","text":" "},{"type":"text","text":"of "},{"code":"wrappedValue","type":"codeVoice"},{"text":" to an underscored (","type":"text"},{"code":"_","type":"codeVoice"},{"text":") version of the name of the property.:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Incorrect method","self.indexedAt = indexedAt","","\/\/ Correct method","self._indexedAt = DateFormattingOptional(wrappedValue: indexedAt)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"init(from decoder: Decoder) throws"},{"type":"text","text":", attempt to to decode each "},{"code":"Date","type":"codeVoice"},{"type":"text","text":" property using"},{"type":"text","text":" "},{"type":"codeVoice","code":"@DateFormattingOptional"},{"text":"â€™s ","type":"text"},{"code":"wrappedValue","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["public init(from decoder: Decoder) throws {","    let container = try decoder.container(keyedBy: CodingKeys.self)","","    self.indexedAt = try container.decodeIfPresent(DateFormattingOptional.self, forKey: .indexedAt)?.wrappedValue","}"]},{"inlineContent":[{"type":"text","text":"Finally, for "},{"code":"encode(to encoder: Encoder)","type":"codeVoice"},{"text":", ensure that each ","type":"text"},{"type":"codeVoice","code":"Date"},{"type":"text","text":" property wrapped with"},{"type":"text","text":" "},{"type":"codeVoice","code":"@DateFormattingOptional"},{"type":"text","text":" is encoded using the custom encoding logic defined in the"},{"text":" ","type":"text"},{"code":"DateFormattingOptional","type":"codeVoice"},{"type":"text","text":" wrapper, using the underscored ("},{"code":"_","type":"codeVoice"},{"type":"text","text":") version of the name of"},{"type":"text","text":" "},{"text":"the property:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["public func encode(to encoder: Encoder) throws {","    var container = encoder.container(keyedBy: CodingKeys.self)","","    try container.encodeIfPresent(self._indexedAt, forKey: .indexedAt)","}"],"type":"codeListing"}],"kind":"content"}],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DateFormattingOptional","kind":"identifier"}],"roleHeading":"Structure","modules":[{"name":"ATProtoKit"}],"navigatorTitle":[{"text":"DateFormattingOptional","kind":"identifier"}],"remoteSource":{"fileName":"DateFormatting.swift","url":"https:\/\/github.com\/MasterJ93\/ATProtoKit\/tree\/main\/Sources\/ATProtoKit\/Utilities\/Extensions\/DateFormatting.swift#L262"},"role":"symbol","title":"DateFormattingOptional","symbolKind":"struct","platforms":[],"externalID":"s:10ATProtoKit22DateFormattingOptionalV"},"topicSections":[{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/init(from:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/init(wrappedValue:)"],"title":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/wrappedValue"]},{"title":"Instance Methods","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/encode(to:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/Encodable-Implementations"],"generated":true}],"sections":[],"seeAlsoSections":[{"title":"Deprecated Property Wrappers","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting"],"generated":true}],"kind":"symbol","relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/ATProtoKit\/Se","doc:\/\/ATProtoKit\/SE","doc:\/\/ATProtoKit\/s8SendableP"],"kind":"relationships","title":"Conforms To"}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use encodeDateIfPresent(_:forKey:) instead.","type":"text"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional"},"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting-PropertyWrapper"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/dateformattingoptional"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"A property wrapper for optionally encoding and decoding "},{"code":"Date?","type":"codeVoice"},{"text":" objects with the","type":"text"},{"type":"text","text":" "},{"text":"ISO8601 format.","type":"text"}],"references":{"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional/wrappedValue":{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/wrappedValue","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"wrappedValue"},{"text":": ","kind":"text"},{"text":"Date","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV"},{"kind":"text","text":"?"}],"url":"\/documentation\/atprotokit\/dateformattingoptional\/wrappedvalue","abstract":[{"text":"The optional ","type":"text"},{"code":"Date?","type":"codeVoice"},{"text":" value being wrapped.","type":"text"}],"role":"symbol","deprecated":true,"type":"topic","title":"wrappedValue","kind":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional":{"url":"\/documentation\/atprotokit\/dateformattingoptional","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional","abstract":[{"type":"text","text":"A property wrapper for optionally encoding and decoding "},{"type":"codeVoice","code":"Date?"},{"type":"text","text":" objects with the"},{"type":"text","text":" "},{"text":"ISO8601 format.","type":"text"}],"type":"topic","title":"DateFormattingOptional","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"DateFormattingOptional","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DateFormattingOptional"}],"deprecated":true},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional/init(from:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": any "},{"preciseIdentifier":"s:s7DecoderP","kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"}],"url":"\/documentation\/atprotokit\/dateformattingoptional\/init(from:)","deprecated":true,"abstract":[{"text":"Decodes an optional ","type":"text"},{"type":"codeVoice","code":"Date?"},{"type":"text","text":" object from a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" using the "},{"type":"codeVoice","code":"CustomDateFormatter"},{"type":"text","text":"."}],"title":"init(from:)","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/init(from:)"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional/Encodable-Implementations":{"abstract":[],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/Encodable-Implementations","role":"collectionGroup","type":"topic","kind":"article","title":"Encodable Implementations","url":"\/documentation\/atprotokit\/dateformattingoptional\/encodable-implementations"},"doc://ATProtoKit/Se":{"type":"unresolvable","identifier":"doc:\/\/ATProtoKit\/Se","title":"Swift.Decodable"},"atprotokit_icon.png":{"identifier":"atprotokit_icon.png","type":"image","variants":[{"url":"\/images\/atprotokit_icon.png","traits":["1x","light"]}],"alt":"A technology icon representing the ATProtoKit framework."},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional/encode(to:)":{"url":"\/documentation\/atprotokit\/dateformattingoptional\/encode(to:)","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/encode(to:)","abstract":[{"type":"text","text":"Encodes the optional "},{"code":"Date?","type":"codeVoice"},{"type":"text","text":" object to a "},{"code":"String","type":"codeVoice"},{"text":" using the ","type":"text"},{"type":"codeVoice","code":"CustomDateFormatter"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or encodes ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" ","type":"text"},{"text":"if ","type":"text"},{"code":"wrappedValue","type":"codeVoice"},{"type":"text","text":" is "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","title":"encode(to:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"text":"to","kind":"externalParam"},{"text":": any ","kind":"text"},{"text":"Encoder","kind":"typeIdentifier","preciseIdentifier":"s:s7EncoderP"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"}],"deprecated":true},"doc://ATProtoKit/documentation/ATProtoKit/DateFormatting":{"type":"topic","deprecated":true,"abstract":[{"type":"text","text":"A property wrapper for encoding and decoding "},{"code":"Date","type":"codeVoice"},{"text":" objects with the ISO8601 format.","type":"text"}],"kind":"symbol","title":"DateFormatting","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DateFormatting","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting","url":"\/documentation\/atprotokit\/dateformatting","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DateFormatting"}]},"doc://ATProtoKit/documentation/ATProtoKit/DateFormatting-PropertyWrapper":{"type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting-PropertyWrapper","abstract":[{"text":"Convert dates to and from the ISO8601 format.","type":"text"}],"kind":"article","role":"collectionGroup","title":"Custom Date Encoding and Decoding","url":"\/documentation\/atprotokit\/dateformatting-propertywrapper"},"doc://ATProtoKit/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/ATProtoKit\/s8SendableP","title":"Swift.Sendable"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional/init(wrappedValue:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Date","preciseIdentifier":"s:10Foundation4DateV"},{"text":"?)","kind":"text"}],"url":"\/documentation\/atprotokit\/dateformattingoptional\/init(wrappedvalue:)","deprecated":true,"abstract":[{"type":"text","text":"Initializes the property with an optional "},{"type":"codeVoice","code":"Date?"},{"text":" value.","type":"text"}],"title":"init(wrappedValue:)","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/init(wrappedValue:)"},"doc://ATProtoKit/SE":{"title":"Swift.Encodable","identifier":"doc:\/\/ATProtoKit\/SE","type":"unresolvable"},"doc://ATProtoKit/documentation/ATProtoKit":{"kind":"symbol","url":"\/documentation\/atprotokit","role":"collection","images":[{"identifier":"atprotokit_icon.png","type":"icon"}],"abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"title":"ATProtoKit","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit"}}}