{"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use encodeDateIfPresent(_:forKey:) instead.","type":"text"}]}],"kind":"symbol","sections":[],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/init(from:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/init(wrappedValue:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/wrappedValue"]},{"title":"Instance Methods","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/encode(to:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/Encodable-Implementations"],"generated":true}],"abstract":[{"text":"A property wrapper for optionally encoding and decoding ","type":"text"},{"code":"Date?","type":"codeVoice"},{"text":" objects with the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ISO8601 format."}],"variants":[{"paths":["\/documentation\/atprotokit\/dateformattingoptional"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"generated":true,"title":"Deprecated Property Wrappers","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting"]}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting-PropertyWrapper"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@propertyWrapper"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DateFormattingOptional","kind":"identifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"When using "},{"type":"codeVoice","code":"@DateFormattingOptional"},{"type":"text","text":", you first need to add it to a "},{"type":"codeVoice","code":"Date?"},{"type":"text","text":" property:"}],"type":"paragraph"},{"syntax":"swift","code":["@DateFormattingOptional public var indexedAt: Date?"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"init()"},{"text":", instead of initializing the property the standard way, you need to set the value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" to an underscored ("},{"type":"codeVoice","code":"_"},{"text":") version of the name of the property.:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Incorrect method","self.indexedAt = indexedAt","","\/\/ Correct method","self._indexedAt = DateFormattingOptional(wrappedValue: indexedAt)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"code":"init(from decoder: Decoder) throws","type":"codeVoice"},{"text":", attempt to to decode each ","type":"text"},{"code":"Date","type":"codeVoice"},{"text":" property using","type":"text"},{"text":" ","type":"text"},{"code":"@DateFormattingOptional","type":"codeVoice"},{"text":"â€™s ","type":"text"},{"type":"codeVoice","code":"wrappedValue"},{"text":":","type":"text"}]},{"syntax":"swift","code":["public init(from decoder: Decoder) throws {","    let container = try decoder.container(keyedBy: CodingKeys.self)","","    self.indexedAt = try container.decodeIfPresent(DateFormattingOptional.self, forKey: .indexedAt)?.wrappedValue","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Finally, for ","type":"text"},{"type":"codeVoice","code":"encode(to encoder: Encoder)"},{"text":", ensure that each ","type":"text"},{"type":"codeVoice","code":"Date"},{"type":"text","text":" property wrapped with"},{"text":" ","type":"text"},{"code":"@DateFormattingOptional","type":"codeVoice"},{"type":"text","text":" is encoded using the custom encoding logic defined in the"},{"type":"text","text":" "},{"type":"codeVoice","code":"DateFormattingOptional"},{"type":"text","text":" wrapper, using the underscored ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") version of the name of"},{"type":"text","text":" "},{"text":"the property:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["public func encode(to encoder: Encoder) throws {","    var container = encoder.container(keyedBy: CodingKeys.self)","","    try container.encodeIfPresent(self._indexedAt, forKey: .indexedAt)","}"]}],"kind":"content"}],"metadata":{"symbolKind":"struct","remoteSource":{"url":"https:\/\/github.com\/MasterJ93\/ATProtoKit\/tree\/main\/Sources\/ATProtoKit\/Utilities\/DateFormatting.swift#L262","fileName":"DateFormatting.swift"},"modules":[{"name":"ATProtoKit"}],"externalID":"s:10ATProtoKit22DateFormattingOptionalV","title":"DateFormattingOptional","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DateFormattingOptional","kind":"identifier"}],"navigatorTitle":[{"text":"DateFormattingOptional","kind":"identifier"}],"roleHeading":"Structure","platforms":[],"role":"symbol"},"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/ATProtoKit\/Se","doc:\/\/ATProtoKit\/SE","doc:\/\/ATProtoKit\/s8SendableP"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional"},"references":{"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional/init(wrappedValue:)":{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/init(wrappedValue:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"wrappedValue"},{"kind":"text","text":": "},{"text":"Date","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV"},{"text":"?)","kind":"text"}],"title":"init(wrappedValue:)","type":"topic","deprecated":true,"abstract":[{"text":"Initializes the property with an optional ","type":"text"},{"type":"codeVoice","code":"Date?"},{"text":" value.","type":"text"}],"url":"\/documentation\/atprotokit\/dateformattingoptional\/init(wrappedvalue:)","role":"symbol"},"doc://ATProtoKit/Se":{"identifier":"doc:\/\/ATProtoKit\/Se","title":"Swift.Decodable","type":"unresolvable"},"atprotokit_logo.png":{"identifier":"atprotokit_logo.png","alt":"A technology icon representing the ATProtoKit framework.","variants":[{"url":"\/images\/atprotokit_logo.png","traits":["1x","light"]}],"type":"image"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional":{"abstract":[{"text":"A property wrapper for optionally encoding and decoding ","type":"text"},{"type":"codeVoice","code":"Date?"},{"text":" objects with the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ISO8601 format."}],"title":"DateFormattingOptional","navigatorTitle":[{"text":"DateFormattingOptional","kind":"identifier"}],"deprecated":true,"kind":"symbol","url":"\/documentation\/atprotokit\/dateformattingoptional","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DateFormattingOptional"}]},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional/Encodable-Implementations":{"title":"Encodable Implementations","kind":"article","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/Encodable-Implementations","url":"\/documentation\/atprotokit\/dateformattingoptional\/encodable-implementations","role":"collectionGroup","abstract":[],"type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional/init(from:)":{"title":"init(from:)","kind":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/init(from:)","url":"\/documentation\/atprotokit\/dateformattingoptional\/init(from:)","role":"symbol","abstract":[{"type":"text","text":"Decodes an optional "},{"code":"Date?","type":"codeVoice"},{"type":"text","text":" object from a "},{"type":"codeVoice","code":"String"},{"text":" using the ","type":"text"},{"code":"CustomDateFormatter","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": any ","kind":"text"},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:s7DecoderP"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic","deprecated":true},"doc://ATProtoKit/documentation/ATProtoKit/DateFormatting":{"title":"DateFormatting","abstract":[{"type":"text","text":"A property wrapper for encoding and decoding "},{"code":"Date","type":"codeVoice"},{"text":" objects with the ISO8601 format.","type":"text"}],"kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DateFormatting"}],"url":"\/documentation\/atprotokit\/dateformatting","role":"symbol","navigatorTitle":[{"text":"DateFormatting","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting","deprecated":true},"doc://ATProtoKit/documentation/ATProtoKit":{"title":"ATProtoKit","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","url":"\/documentation\/atprotokit","kind":"symbol","abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"role":"collection","images":[{"type":"icon","identifier":"atprotokit_logo.png"}],"type":"topic"},"doc://ATProtoKit/SE":{"type":"unresolvable","identifier":"doc:\/\/ATProtoKit\/SE","title":"Swift.Encodable"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormatting-PropertyWrapper":{"title":"Custom Date Encoding and Decoding","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting-PropertyWrapper","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"Convert dates to and from the ISO8601 format."}],"url":"\/documentation\/atprotokit\/dateformatting-propertywrapper"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional/wrappedValue":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"wrappedValue","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Date","preciseIdentifier":"s:10Foundation4DateV"},{"text":"?","kind":"text"}],"abstract":[{"text":"The optional ","type":"text"},{"code":"Date?","type":"codeVoice"},{"type":"text","text":" value being wrapped."}],"role":"symbol","deprecated":true,"url":"\/documentation\/atprotokit\/dateformattingoptional\/wrappedvalue","title":"wrappedValue","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/wrappedValue","kind":"symbol"},"doc://ATProtoKit/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/ATProtoKit\/s8SendableP","title":"Swift.Sendable"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional/encode(to:)":{"url":"\/documentation\/atprotokit\/dateformattingoptional\/encode(to:)","title":"encode(to:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": any "},{"text":"Encoder","preciseIdentifier":"s:s7EncoderP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional\/encode(to:)","type":"topic","kind":"symbol","deprecated":true,"abstract":[{"type":"text","text":"Encodes the optional "},{"type":"codeVoice","code":"Date?"},{"type":"text","text":" object to a "},{"code":"String","type":"codeVoice"},{"text":" using the ","type":"text"},{"type":"codeVoice","code":"CustomDateFormatter"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"or encodes ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"text":"if ","type":"text"},{"type":"codeVoice","code":"wrappedValue"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"role":"symbol"}}}