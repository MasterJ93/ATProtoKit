{"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/dateformatting-propertywrapper"]}],"identifier":{"url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting-PropertyWrapper","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CustomDateFormatter"],"title":"CustomDateFormatter"},{"title":"Decodable Methods","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/decodeDate(from:forKey:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/decodeDateIfPresent(from:forKey:)"]},{"title":"Encodable Methods","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/encodeDate(_:with:forKey:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/encodeDateIfPresent(_:with:forKey:)"]},{"title":"Deprecated Property Wrappers","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional"]}],"metadata":{"roleHeading":"API Collection","title":"Custom Date Encoding and Decoding","color":{"standardColorIdentifier":"blue"},"modules":[{"name":"ATProtoKit"}],"role":"collectionGroup"},"kind":"article","abstract":[{"type":"text","text":"Convert dates to and from the ISO8601 format."}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"AT Protocol requires that dates must be formatted in the ISO8601 format. ATProtoKit gives you the tools to convert from ","type":"text"},{"code":"Date","type":"codeVoice"},{"text":" to ISO8601 formatted dates and vice versa with custom ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" methods. All methods use ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CustomDateFormatter","isActive":true},{"type":"text","text":" to do the decoding and encoding."}]},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The methods should be used over the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional","isActive":true},{"type":"text","text":" property wrappers, which are now deprecated."}]}],"style":"note"},{"anchor":"Usage","level":2,"text":"Usage","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The easiest way to do this is by using the ","type":"text"},{"type":"codeVoice","code":"@ATLexiconModel"},{"text":" macro:","type":"text"}]},{"syntax":"swift","code":["@ATLexiconModel","public struct UserProfile: ATRecordProtocol {","    public static private(set) var type = \"com.example.actor.profile\"","    public let userID: Int","    public let username: String","    public var bio: String?","    public var avatarURL: URL?","    public var followerCount: Int?","    public var followingCount: Int?","    public let createdAt: Date","}"],"type":"codeListing"},{"inlineContent":[{"text":"This will automatically create the custom initializer, as well as the custom decoding initializer and encoding method, in order to insert the appropriate methods.","type":"text"}],"type":"paragraph"},{"anchor":"Manual-Entry","type":"heading","level":2,"text":"Manual Entry"},{"type":"paragraph","inlineContent":[{"text":"If you rather write the custom initializers and methods manually, you can do so as well. When creating the custom initializers and methods, youâ€™ll want to replace the following methods with the custom ones:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Replace ","type":"text"},{"code":"decode(_:forKey:)","type":"codeVoice"},{"text":" with ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/decodeDate(from:forKey:)","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Replace "},{"type":"codeVoice","code":"decodeIfPresent(_:forKey:)"},{"text":" with ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/decodeDateIfPresent(from:forKey:)","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Replace ","type":"text"},{"type":"codeVoice","code":"encode(_:forKey:)"},{"text":" with ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/encodeDate(_:with:forKey:)","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace "},{"type":"codeVoice","code":"encodeIfPresent(_:forKey:)"},{"text":" with ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/encodeDateIfPresent(_:with:forKey:)","isActive":true},{"type":"text","text":"."}]}]}]},{"syntax":"swift","code":["public struct UserProfile: ATRecordProtocol {","    public static private(set) var type = \"com.example.actor.profile\"","    public let userID: Int","    public let username: String","    public var bio: String?","    public var avatarURL: URL?","    public var followerCount: Int?","    public var followingCount: Int?","    public let createdAt: Date","","    public init(userID: Int, username: String, bio: String? = nil, avatarURL: URL? = nil,","                followerCount: Int? = nil, followingCount: Int? = nil, createdAt: Date) {","        self.userID = userID","        self.username = username","        self.bio = bio","        self.avatarURL = avatarURL","        self.followerCount = followerCount","        self.followingCount = followingCount","        self.createdAt = createdAt","    }","","    public init(from decoder: any Decoder) throws {","        let container = try decoder.container(keyedBy: CodingKeys.self)","","        self.userID = try container.decode(Int.self, forKey: .userID)","        self.username = try container.decode(String.self, forKey: .username)","        self.bio = try container.decodeIfPresent(String.self, forKey: .bio)","        self.avatarURL = try container.decodeIfPresent(URL.self, forKey: .avatarURL)","        self.followerCount = try container.decodeIfPresent(Int.self, forKey: .followerCount)","        self.followingCount = try container.decodeIfPresent(Int.self, forKey: .followingCount)","        \/\/ Replace `container.decode(Date.self, forKey: .createAt)`.","        self.createdAt = try decodeDate(from: container, forKey: .createdAt)","    }","","    public func encode(to encoder: any Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","","        try container.encode(self.userID, forKey: .userID)","        try container.encode(self.username, forKey: .username)","        try container.encodeIfPresent(self.bio, forKey: .bio)","        try container.encodeIfPresent(self.avatarURL, forKey: .avatarURL)","        try container.encodeIfPresent(self.followerCount, forKey: .followerCount)","        try container.encodeIfPresent(self.followingCount, forKey: .followingCount)","        \/\/ Replace `container.encode(self.createdAt, forKey: .createdAt)`.","        try encodeDate(self.createdAt, with: &container, forKey: .createdAt)","    }","","    enum CodingKeys: CodingKey {","        case userID","        case username","        case bio","        case avatarURL","        case followerCount","        case followingCount","        case createdAt","    }","}"],"type":"codeListing"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoTools","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFacetParser"],"title":"Utilities","generated":true}],"references":{"doc://ATProtoKit/documentation/ATProtoKit/decodeDateIfPresent(from:forKey:)":{"role":"symbol","url":"\/documentation\/atprotokit\/decodedateifpresent(from:forkey:)","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/decodeDateIfPresent(from:forKey:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"decodeDateIfPresent"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyedDecodingContainer","preciseIdentifier":"s:s22KeyedDecodingContainerV"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"forKey"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:10Foundation4DateV","kind":"typeIdentifier","text":"Date"},{"kind":"text","text":"?"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Converts an ISO8601-formatted date string (if it exists) and converts it to a "},{"code":"Date?","type":"codeVoice"},{"type":"text","text":" object."}],"title":"decodeDateIfPresent(from:forKey:)"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormatting":{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DateFormatting","kind":"identifier"}],"url":"\/documentation\/atprotokit\/dateformatting","navigatorTitle":[{"text":"DateFormatting","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A property wrapper for encoding and decoding ","type":"text"},{"code":"Date","type":"codeVoice"},{"type":"text","text":" objects with the ISO8601 format."}],"deprecated":true,"title":"DateFormatting"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DateFormattingOptional","kind":"identifier"}],"navigatorTitle":[{"text":"DateFormattingOptional","kind":"identifier"}],"deprecated":true,"kind":"symbol","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional","role":"symbol","title":"DateFormattingOptional","url":"\/documentation\/atprotokit\/dateformattingoptional","abstract":[{"type":"text","text":"A property wrapper for optionally encoding and decoding "},{"code":"Date?","type":"codeVoice"},{"type":"text","text":" objects with the"},{"text":" ","type":"text"},{"text":"ISO8601 format.","type":"text"}]},"doc://ATProtoKit/documentation/ATProtoKit/encodeDateIfPresent(_:with:forKey:)":{"role":"symbol","url":"\/documentation\/atprotokit\/encodedateifpresent(_:with:forkey:)","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/encodeDateIfPresent(_:with:forKey:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encodeDateIfPresent"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"Date","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV"},{"text":"?, ","kind":"text"},{"text":"with","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"KeyedEncodingContainer","preciseIdentifier":"s:s22KeyedEncodingContainerV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"forKey"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Encodes a "},{"code":"Date?","type":"codeVoice"},{"type":"text","text":" value to its string representation (if the value exists) and converts it to"},{"type":"text","text":" "},{"type":"text","text":"its ISO8601 format."}],"title":"encodeDateIfPresent(_:with:forKey:)"},"doc://ATProtoKit/documentation/ATProtoKit/encodeDate(_:with:forKey:)":{"role":"symbol","url":"\/documentation\/atprotokit\/encodedate(_:with:forkey:)","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/encodeDate(_:with:forKey:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"encodeDate","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV","text":"Date"},{"kind":"text","text":"?, "},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"KeyedEncodingContainer","preciseIdentifier":"s:s22KeyedEncodingContainerV"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"forKey","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Encodes a "},{"code":"Date","type":"codeVoice"},{"type":"text","text":" value to its string representation and converts it to its ISO8601 format."}],"title":"encodeDate(_:with:forKey:)"},"doc://ATProtoKit/documentation/ATProtoKit":{"kind":"symbol","title":"ATProtoKit","role":"collection","abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","images":[{"type":"icon","identifier":"atprotokit_logo.png"}],"url":"\/documentation\/atprotokit","type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit/CustomDateFormatter":{"role":"symbol","url":"\/documentation\/atprotokit\/customdateformatter","navigatorTitle":[{"text":"CustomDateFormatter","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CustomDateFormatter","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomDateFormatter"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A structure for custom date formatting to and from the ISO8601 format."}],"title":"CustomDateFormatter"},"doc://ATProtoKit/documentation/ATProtoKit/ATFacetParser":{"role":"symbol","url":"\/documentation\/atprotokit\/atfacetparser","navigatorTitle":[{"text":"ATFacetParser","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFacetParser","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ATFacetParser"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A utility class designed for parsing various elements like mentions, URLs, and hashtags from text."}],"title":"ATFacetParser"},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoTools":{"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"ATProtoTools","kind":"identifier"}],"type":"topic","url":"\/documentation\/atprotokit\/atprototools","abstract":[{"text":"A group of methods for miscellaneous aspects of ATProtoKit.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATProtoTools"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoTools","title":"ATProtoTools"},"doc://ATProtoKit/documentation/ATProtoKit/decodeDate(from:forKey:)":{"role":"symbol","url":"\/documentation\/atprotokit\/decodedate(from:forkey:)","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/decodeDate(from:forKey:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decodeDate"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyedDecodingContainer","preciseIdentifier":"s:s22KeyedDecodingContainerV"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"forKey","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Date","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Decodes a non-optional date string using the provided "},{"code":"CustomDateFormatter","type":"codeVoice"},{"type":"text","text":"."}],"title":"decodeDate(from:forKey:)"},"atprotokit_logo.png":{"variants":[{"url":"\/images\/atprotokit_logo.png","traits":["1x","light"]}],"type":"image","alt":"A technology icon representing the ATProtoKit framework.","identifier":"atprotokit_logo.png"}}}