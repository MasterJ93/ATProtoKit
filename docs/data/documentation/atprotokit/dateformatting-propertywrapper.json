{"identifier":{"url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting-PropertyWrapper","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Convert dates to and from the ISO8601 format."}],"topicSections":[{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CustomDateFormatter"],"title":"CustomDateFormatter"},{"title":"Decodable Methods","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedDecodingContainer\/decodeDate(forKey:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedDecodingContainer\/decodeDateIfPresent(forKey:)"]},{"title":"Encodable Methods","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedEncodingContainer\/encodeDate(_:forKey:)","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedEncodingContainer\/encodeDateIfPresent(_:forKey:)"]},{"title":"Deprecated Property Wrappers","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"AT Protocol requires that dates must be formatted in the ISO8601 format. ATProtoKit gives you the tools to convert from "},{"code":"Date","type":"codeVoice"},{"type":"text","text":" to ISO8601 formatted dates and vice versa with custom "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" and "},{"code":"Encodable","type":"codeVoice"},{"text":" methods. All methods use ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CustomDateFormatter","type":"reference","isActive":true},{"text":" to do the decoding and encoding.","type":"text"}]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"text":"The methods should be used over the ","type":"text"},{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional"},{"text":" property wrappers, which are now deprecated.","type":"text"}],"type":"paragraph"}]},{"text":"Usage","level":2,"type":"heading","anchor":"Usage"},{"type":"paragraph","inlineContent":[{"text":"The easiest way to do this is by using the ","type":"text"},{"code":"@ATLexiconModel","type":"codeVoice"},{"text":" macro:","type":"text"}]},{"code":["@ATLexiconModel","public struct UserProfile: ATRecordProtocol {","    public static private(set) var type = \"com.example.actor.profile\"","    public let userID: Int","    public let username: String","    public var bio: String?","    public var avatarURL: URL?","    public var followerCount: Int?","    public var followingCount: Int?","    public let createdAt: Date","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will automatically create the custom initializer, as well as the custom decoding initializer and encoding method, in order to insert the appropriate methods."}]},{"type":"heading","anchor":"Manual-Entry","level":2,"text":"Manual Entry"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you rather write the custom initializers and methods manually, you can do so as well. When creating the custom initializers and methods, you’ll want to replace the following methods with the custom ones:"}]},{"header":"row","alignments":["right","left"],"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Replace","type":"text"}]}],[{"inlineContent":[{"text":"With…","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"decode(_:forKey:)","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedDecodingContainer\/decodeDate(forKey:)","type":"reference","isActive":true}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"decodeIfPresent(_:forKey:)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedDecodingContainer\/decodeDateIfPresent(forKey:)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"encode(_:forKey:)"}],"type":"paragraph"}],[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedEncodingContainer\/encodeDate(_:forKey:)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"encodeIfPresent(_:forKey:)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedEncodingContainer\/encodeDateIfPresent(_:forKey:)","isActive":true,"type":"reference"}]}]]],"type":"table"},{"type":"codeListing","code":["public struct UserProfile: ATRecordProtocol {","    public static private(set) var type = \"com.example.actor.profile\"","    public let userID: Int","    public let username: String","    public var bio: String?","    public var avatarURL: URL?","    public var followerCount: Int?","    public var followingCount: Int?","    public let createdAt: Date","","    public init(userID: Int, username: String, bio: String? = nil, avatarURL: URL? = nil,","                followerCount: Int? = nil, followingCount: Int? = nil, createdAt: Date) {","        self.userID = userID","        self.username = username","        self.bio = bio","        self.avatarURL = avatarURL","        self.followerCount = followerCount","        self.followingCount = followingCount","        self.createdAt = createdAt","    }","","    public init(from decoder: any Decoder) throws {","        let container = try decoder.container(keyedBy: CodingKeys.self)","","        self.userID = try container.decode(Int.self, forKey: .userID)","        self.username = try container.decode(String.self, forKey: .username)","        self.bio = try container.decodeIfPresent(String.self, forKey: .bio)","        self.avatarURL = try container.decodeIfPresent(URL.self, forKey: .avatarURL)","        self.followerCount = try container.decodeIfPresent(Int.self, forKey: .followerCount)","        self.followingCount = try container.decodeIfPresent(Int.self, forKey: .followingCount)","        \/\/ Replace `container.decode(Date.self, forKey: .createAt)`.","        self.createdAt = try container.decodeDate(forKey: .createdAt)","    }","","    public func encode(to encoder: any Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","","        try container.encode(self.userID, forKey: .userID)","        try container.encode(self.username, forKey: .username)","        try container.encodeIfPresent(self.bio, forKey: .bio)","        try container.encodeIfPresent(self.avatarURL, forKey: .avatarURL)","        try container.encodeIfPresent(self.followerCount, forKey: .followerCount)","        try container.encodeIfPresent(self.followingCount, forKey: .followingCount)","        \/\/ Replace `container.encode(self.createdAt, forKey: .createdAt)`.","        try container.encodeDate(self.createdAt, forKey: .createdAt)","    }","","    enum CodingKeys: CodingKey {","        case userID","        case username","        case bio","        case avatarURL","        case followerCount","        case followingCount","        case createdAt","    }","}"],"syntax":"swift"}]}],"metadata":{"role":"collectionGroup","modules":[{"name":"ATProtoKit"}],"roleHeading":"API Collection","title":"Custom Date Encoding and Decoding","color":{"standardColorIdentifier":"blue"}},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/dateformatting-propertywrapper"]}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"kind":"article","seeAlsoSections":[{"generated":true,"title":"Utilities","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoTools","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFacetParser"]}],"references":{"doc://ATProtoKit/documentation/ATProtoKit/Swift/KeyedDecodingContainer/decodeDateIfPresent(forKey:)":{"abstract":[{"text":"Converts an ISO8601-formatted date string (if it exists) and converts it to a ","type":"text"},{"type":"codeVoice","code":"Date?"},{"text":" object.","type":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedDecodingContainer\/decodeDateIfPresent(forKey:)","role":"symbol","conformance":{"constraints":[{"code":"K","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"decodeDateIfPresent","kind":"identifier"},{"kind":"text","text":"("},{"text":"forKey","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s22KeyedDecodingContainerV","text":"KeyedDecodingContainer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"K","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","text":"Key"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Date","preciseIdentifier":"s:10Foundation4DateV"},{"text":"?","kind":"text"}],"kind":"symbol","title":"decodeDateIfPresent(forKey:)","url":"\/documentation\/atprotokit\/swift\/keyeddecodingcontainer\/decodedateifpresent(forkey:)"},"doc://ATProtoKit/documentation/ATProtoKit/Swift/KeyedEncodingContainer/encodeDate(_:forKey:)":{"url":"\/documentation\/atprotokit\/swift\/keyedencodingcontainer\/encodedate(_:forkey:)","type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"Encodes a ","type":"text"},{"type":"codeVoice","code":"Date"},{"type":"text","text":" value to its string representation and converts it to its ISO8601 format."}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedEncodingContainer\/encodeDate(_:forKey:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"encodeDate","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Date","preciseIdentifier":"s:10Foundation4DateV"},{"kind":"text","text":", "},{"text":"forKey","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s22KeyedEncodingContainerV","text":"KeyedEncodingContainer"},{"text":"<","kind":"text"},{"text":"K","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Key","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"title":"encodeDate(_:forKey:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"K"},{"text":" conforms to ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://ATProtoKit/documentation/ATProtoKit/Swift/KeyedEncodingContainer/encodeDateIfPresent(_:forKey:)":{"url":"\/documentation\/atprotokit\/swift\/keyedencodingcontainer\/encodedateifpresent(_:forkey:)","type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Encodes a "},{"type":"codeVoice","code":"Date?"},{"type":"text","text":" value to its string representation (if the value exists) and converts it to"},{"type":"text","text":" "},{"text":"its ISO8601 format.","type":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedEncodingContainer\/encodeDateIfPresent(_:forKey:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encodeDateIfPresent","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:10Foundation4DateV","text":"Date","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"forKey","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s22KeyedEncodingContainerV","text":"KeyedEncodingContainer"},{"kind":"text","text":"<"},{"text":"K","kind":"typeIdentifier"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Key"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"}],"title":"encodeDateIfPresent(_:forKey:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"K"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}]}},"doc://ATProtoKit/documentation/ATProtoKit/ATFacetParser":{"abstract":[{"type":"text","text":"A utility class designed for parsing various elements like mentions, URLs, and hashtags from text."}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ATFacetParser","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ATFacetParser"}],"url":"\/documentation\/atprotokit\/atfacetparser","title":"ATFacetParser","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFacetParser"},"doc://ATProtoKit/documentation/ATProtoKit/CustomDateFormatter":{"kind":"symbol","abstract":[{"type":"text","text":"A structure for custom date formatting to and from the ISO8601 format."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"CustomDateFormatter","kind":"identifier"}],"url":"\/documentation\/atprotokit\/customdateformatter","title":"CustomDateFormatter","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CustomDateFormatter","role":"symbol","navigatorTitle":[{"text":"CustomDateFormatter","kind":"identifier"}]},"atprotokit_icon.png":{"identifier":"atprotokit_icon.png","type":"image","alt":"A technology icon representing the ATProtoKit framework.","variants":[{"traits":["1x","light"],"url":"\/images\/atprotokit_icon.png"}]},"doc://ATProtoKit/documentation/ATProtoKit/ATProtoTools":{"title":"ATProtoTools","kind":"symbol","abstract":[{"text":"A group of methods for miscellaneous aspects of ATProtoKit.","type":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATProtoTools","role":"symbol","type":"topic","url":"\/documentation\/atprotokit\/atprototools","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ATProtoTools","kind":"identifier"}],"navigatorTitle":[{"text":"ATProtoTools","kind":"identifier"}]},"doc://ATProtoKit/documentation/ATProtoKit":{"kind":"symbol","url":"\/documentation\/atprotokit","role":"collection","images":[{"identifier":"atprotokit_icon.png","type":"icon"}],"abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"title":"ATProtoKit","type":"topic","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormatting":{"type":"topic","deprecated":true,"abstract":[{"type":"text","text":"A property wrapper for encoding and decoding "},{"code":"Date","type":"codeVoice"},{"text":" objects with the ISO8601 format.","type":"text"}],"kind":"symbol","title":"DateFormatting","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DateFormatting","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormatting","url":"\/documentation\/atprotokit\/dateformatting","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DateFormatting"}]},"doc://ATProtoKit/documentation/ATProtoKit/Swift/KeyedDecodingContainer/decodeDate(forKey:)":{"abstract":[{"text":"Decodes a non-optional date string using the provided ","type":"text"},{"code":"CustomDateFormatter","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/Swift\/KeyedDecodingContainer\/decodeDate(forKey:)","role":"symbol","conformance":{"constraints":[{"code":"K","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decodeDate"},{"text":"(","kind":"text"},{"text":"forKey","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s22KeyedDecodingContainerV","text":"KeyedDecodingContainer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"K","kind":"typeIdentifier"},{"kind":"text","text":">."},{"text":"Key","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DateV","text":"Date"}],"kind":"symbol","title":"decodeDate(forKey:)","url":"\/documentation\/atprotokit\/swift\/keyeddecodingcontainer\/decodedate(forkey:)"},"doc://ATProtoKit/documentation/ATProtoKit/DateFormattingOptional":{"url":"\/documentation\/atprotokit\/dateformattingoptional","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/DateFormattingOptional","abstract":[{"type":"text","text":"A property wrapper for optionally encoding and decoding "},{"type":"codeVoice","code":"Date?"},{"type":"text","text":" objects with the"},{"type":"text","text":" "},{"text":"ISO8601 format.","type":"text"}],"type":"topic","title":"DateFormattingOptional","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"DateFormattingOptional","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DateFormattingOptional"}],"deprecated":true}}}